
AutoPilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005500  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b30  08005b30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00015b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b34  08005b34  00015b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  08005ba8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005ba8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e492  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff7  00000000  00000000  0002e532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00030530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f87  00000000  00000000  00031f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104e2  00000000  00000000  00034ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbd6  00000000  00000000  000453c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  000d4ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005680 	.word	0x08005680

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005680 	.word	0x08005680

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b96e 	b.w	8000d48 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468c      	mov	ip, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 8083 	bne.w	8000b9a <__udivmoddi4+0x116>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4617      	mov	r7, r2
 8000a98:	d947      	bls.n	8000b2a <__udivmoddi4+0xa6>
 8000a9a:	fab2 f282 	clz	r2, r2
 8000a9e:	b142      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	f1c2 0020 	rsb	r0, r2, #32
 8000aa4:	fa24 f000 	lsr.w	r0, r4, r0
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	4097      	lsls	r7, r2
 8000aac:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbbc f6f8 	udiv	r6, ip, r8
 8000abc:	fa1f fe87 	uxth.w	lr, r7
 8000ac0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ac4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac8:	fb06 f10e 	mul.w	r1, r6, lr
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad6:	f080 8119 	bcs.w	8000d0c <__udivmoddi4+0x288>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8116 	bls.w	8000d0c <__udivmoddi4+0x288>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	443b      	add	r3, r7
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aec:	fb08 3310 	mls	r3, r8, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af8:	45a6      	cmp	lr, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	193c      	adds	r4, r7, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8105 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000b06:	45a6      	cmp	lr, r4
 8000b08:	f240 8102 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	443c      	add	r4, r7
 8000b10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b14:	eba4 040e 	sub.w	r4, r4, lr
 8000b18:	2600      	movs	r6, #0
 8000b1a:	b11d      	cbz	r5, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c5 4300 	strd	r4, r3, [r5]
 8000b24:	4631      	mov	r1, r6
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	b902      	cbnz	r2, 8000b2e <__udivmoddi4+0xaa>
 8000b2c:	deff      	udf	#255	; 0xff
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d150      	bne.n	8000bd8 <__udivmoddi4+0x154>
 8000b36:	1bcb      	subs	r3, r1, r7
 8000b38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3c:	fa1f f887 	uxth.w	r8, r7
 8000b40:	2601      	movs	r6, #1
 8000b42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b46:	0c21      	lsrs	r1, r4, #16
 8000b48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b50:	fb08 f30c 	mul.w	r3, r8, ip
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000b58:	1879      	adds	r1, r7, r1
 8000b5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0xe2>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	f200 80e9 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b66:	4684      	mov	ip, r0
 8000b68:	1ac9      	subs	r1, r1, r3
 8000b6a:	b2a3      	uxth	r3, r4
 8000b6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b78:	fb08 f800 	mul.w	r8, r8, r0
 8000b7c:	45a0      	cmp	r8, r4
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x10c>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x10a>
 8000b88:	45a0      	cmp	r8, r4
 8000b8a:	f200 80d9 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000b8e:	4618      	mov	r0, r3
 8000b90:	eba4 0408 	sub.w	r4, r4, r8
 8000b94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b98:	e7bf      	b.n	8000b1a <__udivmoddi4+0x96>
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d909      	bls.n	8000bb2 <__udivmoddi4+0x12e>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	f000 80b1 	beq.w	8000d06 <__udivmoddi4+0x282>
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	e9c5 0100 	strd	r0, r1, [r5]
 8000baa:	4630      	mov	r0, r6
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	fab3 f683 	clz	r6, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d14a      	bne.n	8000c50 <__udivmoddi4+0x1cc>
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d302      	bcc.n	8000bc4 <__udivmoddi4+0x140>
 8000bbe:	4282      	cmp	r2, r0
 8000bc0:	f200 80b8 	bhi.w	8000d34 <__udivmoddi4+0x2b0>
 8000bc4:	1a84      	subs	r4, r0, r2
 8000bc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	468c      	mov	ip, r1
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	d0a8      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000bd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f603 	lsr.w	r6, r0, r3
 8000be0:	4097      	lsls	r7, r2
 8000be2:	fa01 f002 	lsl.w	r0, r1, r2
 8000be6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bea:	40d9      	lsrs	r1, r3
 8000bec:	4330      	orrs	r0, r6
 8000bee:	0c03      	lsrs	r3, r0, #16
 8000bf0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c00:	fb06 f108 	mul.w	r1, r6, r8
 8000c04:	4299      	cmp	r1, r3
 8000c06:	fa04 f402 	lsl.w	r4, r4, r2
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x19c>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c12:	f080 808d 	bcs.w	8000d30 <__udivmoddi4+0x2ac>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 808a 	bls.w	8000d30 <__udivmoddi4+0x2ac>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b281      	uxth	r1, r0
 8000c24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c30:	fb00 f308 	mul.w	r3, r0, r8
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x1c4>
 8000c38:	1879      	adds	r1, r7, r1
 8000c3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c3e:	d273      	bcs.n	8000d28 <__udivmoddi4+0x2a4>
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d971      	bls.n	8000d28 <__udivmoddi4+0x2a4>
 8000c44:	3802      	subs	r0, #2
 8000c46:	4439      	add	r1, r7
 8000c48:	1acb      	subs	r3, r1, r3
 8000c4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c4e:	e778      	b.n	8000b42 <__udivmoddi4+0xbe>
 8000c50:	f1c6 0c20 	rsb	ip, r6, #32
 8000c54:	fa03 f406 	lsl.w	r4, r3, r6
 8000c58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c5c:	431c      	orrs	r4, r3
 8000c5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c62:	fa01 f306 	lsl.w	r3, r1, r6
 8000c66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c6e:	431f      	orrs	r7, r3
 8000c70:	0c3b      	lsrs	r3, r7, #16
 8000c72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c76:	fa1f f884 	uxth.w	r8, r4
 8000c7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c82:	fb09 fa08 	mul.w	sl, r9, r8
 8000c86:	458a      	cmp	sl, r1
 8000c88:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x220>
 8000c92:	1861      	adds	r1, r4, r1
 8000c94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c98:	d248      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000c9a:	458a      	cmp	sl, r1
 8000c9c:	d946      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000c9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ca2:	4421      	add	r1, r4
 8000ca4:	eba1 010a 	sub.w	r1, r1, sl
 8000ca8:	b2bf      	uxth	r7, r7
 8000caa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cb6:	fb00 f808 	mul.w	r8, r0, r8
 8000cba:	45b8      	cmp	r8, r7
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x24a>
 8000cbe:	19e7      	adds	r7, r4, r7
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc4:	d22e      	bcs.n	8000d24 <__udivmoddi4+0x2a0>
 8000cc6:	45b8      	cmp	r8, r7
 8000cc8:	d92c      	bls.n	8000d24 <__udivmoddi4+0x2a0>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4427      	add	r7, r4
 8000cce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cd2:	eba7 0708 	sub.w	r7, r7, r8
 8000cd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cda:	454f      	cmp	r7, r9
 8000cdc:	46c6      	mov	lr, r8
 8000cde:	4649      	mov	r1, r9
 8000ce0:	d31a      	bcc.n	8000d18 <__udivmoddi4+0x294>
 8000ce2:	d017      	beq.n	8000d14 <__udivmoddi4+0x290>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x27a>
 8000ce6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cea:	eb67 0701 	sbc.w	r7, r7, r1
 8000cee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cf2:	40f2      	lsrs	r2, r6
 8000cf4:	ea4c 0202 	orr.w	r2, ip, r2
 8000cf8:	40f7      	lsrs	r7, r6
 8000cfa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e70b      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e9      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6fd      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d14:	4543      	cmp	r3, r8
 8000d16:	d2e5      	bcs.n	8000ce4 <__udivmoddi4+0x260>
 8000d18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7df      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d24:	4608      	mov	r0, r1
 8000d26:	e7d2      	b.n	8000cce <__udivmoddi4+0x24a>
 8000d28:	4660      	mov	r0, ip
 8000d2a:	e78d      	b.n	8000c48 <__udivmoddi4+0x1c4>
 8000d2c:	4681      	mov	r9, r0
 8000d2e:	e7b9      	b.n	8000ca4 <__udivmoddi4+0x220>
 8000d30:	4666      	mov	r6, ip
 8000d32:	e775      	b.n	8000c20 <__udivmoddi4+0x19c>
 8000d34:	4630      	mov	r0, r6
 8000d36:	e74a      	b.n	8000bce <__udivmoddi4+0x14a>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	4439      	add	r1, r7
 8000d3e:	e713      	b.n	8000b68 <__udivmoddi4+0xe4>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	e724      	b.n	8000b90 <__udivmoddi4+0x10c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <HAL_I2C_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

	/*##-1- Enable peripherals and GPIO Clocks #################################*/
	/* Enable GPIO TX/RX clock */
	I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
	I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
	/* Enable I2C1 clock */
	I2Cx_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_I2C_MspInit+0x9c>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]

	/*##-2- Configure peripheral GPIO ##########################################*/
	/* I2C TX GPIO pin configuration  */
	GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 8000da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000dae:	2312      	movs	r3, #18
 8000db0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_I2C_MspInit+0xa0>)
 8000dc6:	f001 fbe7 	bl	8002598 <HAL_GPIO_Init>

	/* I2C RX GPIO pin configuration  */
	GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 8000dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <HAL_I2C_MspInit+0xa0>)
 8000ddc:	f001 fbdc 	bl	8002598 <HAL_GPIO_Init>


}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020400 	.word	0x40020400

08000df0 <I2C__vReadBuffer>:

}


void I2C__vReadBuffer(uint8_t I2c_add, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t rxbuffsz)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	603a      	str	r2, [r7, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
    /* -> Lets ask for register's address */
	I2C__vWriteBuffer(I2c_add, &RegAddr, 1);
 8000e06:	1db9      	adds	r1, r7, #6
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f82b 	bl	8000e68 <I2C__vWriteBuffer>

    /* -> Put I2C peripheral in reception process */
    while(HAL_I2C_Master_Receive(&I2cHandle, (uint16_t)(I2c_add<<1), aRxBuffer, (uint16_t)rxbuffsz, (uint32_t)1000) != HAL_OK)
 8000e12:	e008      	b.n	8000e26 <I2C__vReadBuffer+0x36>
    {
        /* Error_Handler() function is called when Timeout error occurs.
         * When Acknowledge failure occurs (Slave don't acknowledge it's address)
         * Master restarts communication
         */
        if (HAL_I2C_GetError(&I2cHandle) != HAL_I2C_ERROR_AF)
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <I2C__vReadBuffer+0x70>)
 8000e16:	f002 f9b9 	bl	800318c <HAL_I2C_GetError>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d002      	beq.n	8000e26 <I2C__vReadBuffer+0x36>
        {
            Error_Handler("Error in I2C read !!!");
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <I2C__vReadBuffer+0x74>)
 8000e22:	f000 ffd9 	bl	8001dd8 <Error_Handler>
    while(HAL_I2C_Master_Receive(&I2cHandle, (uint16_t)(I2c_add<<1), aRxBuffer, (uint16_t)rxbuffsz, (uint32_t)1000) != HAL_OK)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	797b      	ldrb	r3, [r7, #5]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <I2C__vReadBuffer+0x70>)
 8000e3c:	f001 ff72 	bl	8002d24 <HAL_I2C_Master_Receive>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1e6      	bne.n	8000e14 <I2C__vReadBuffer+0x24>
     * transfer before starting a new one.
     * For simplicity reasons, this example is just waiting till the end of the
     * transfer, but application may perform other tasks while transfer operation
     * is ongoing.
     **/
    while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000e46:	bf00      	nop
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <I2C__vReadBuffer+0x70>)
 8000e4a:	f002 f991 	bl	8003170 <HAL_I2C_GetState>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b20      	cmp	r3, #32
 8000e52:	d1f9      	bne.n	8000e48 <I2C__vReadBuffer+0x58>
    {
    }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000098 	.word	0x20000098
 8000e64:	080056b0 	.word	0x080056b0

08000e68 <I2C__vWriteBuffer>:

void I2C__vWriteBuffer(uint8_t I2c_add, uint8_t *aTxBuffer, uint16_t txbuffsz)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
    /* -> Start the transmission process */
    /* While the I2C in reception process, user can transmit data through "aTxBuffer" buffer */
    while(HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)(I2c_add<<1),(uint8_t*)aTxBuffer,txbuffsz,(uint32_t)1000)!= HAL_OK)
 8000e78:	e008      	b.n	8000e8c <I2C__vWriteBuffer+0x24>
         * Error_Handler() function is called when Timeout error occurs.
         * When Acknowledge failure occurs (Slave don't acknowledge it's address)
         * Master restarts communication
         */

        if (HAL_I2C_GetError(&I2cHandle) != HAL_I2C_ERROR_AF)
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <I2C__vWriteBuffer+0x5c>)
 8000e7c:	f002 f986 	bl	800318c <HAL_I2C_GetError>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d002      	beq.n	8000e8c <I2C__vWriteBuffer+0x24>
        {
            Error_Handler("Error in I2C write !!!");
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <I2C__vWriteBuffer+0x60>)
 8000e88:	f000 ffa6 	bl	8001dd8 <Error_Handler>
    while(HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)(I2c_add<<1),(uint8_t*)aTxBuffer,txbuffsz,(uint32_t)1000)!= HAL_OK)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	b299      	uxth	r1, r3
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <I2C__vWriteBuffer+0x5c>)
 8000ea0:	f001 fe42 	bl	8002b28 <HAL_I2C_Master_Transmit>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1e7      	bne.n	8000e7a <I2C__vWriteBuffer+0x12>
     * transfer before starting a new one.
     * For simplicity reasons, this example is just waiting till the end of the
     * transfer, but application may perform other tasks while transfer operation
     * is ongoing.
     */
      while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000eaa:	bf00      	nop
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <I2C__vWriteBuffer+0x5c>)
 8000eae:	f002 f95f 	bl	8003170 <HAL_I2C_GetState>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b20      	cmp	r3, #32
 8000eb6:	d1f9      	bne.n	8000eac <I2C__vWriteBuffer+0x44>
      {
      }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000098 	.word	0x20000098
 8000ec8:	080056c8 	.word	0x080056c8

08000ecc <I2C__vWriteSingleByteBuffer>:

void I2C__vWriteSingleByteBuffer(uint8_t I2c_add, uint8_t regAdress, uint8_t regValue)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71bb      	strb	r3, [r7, #6]
 8000eda:	4613      	mov	r3, r2
 8000edc:	717b      	strb	r3, [r7, #5]
	uint8_t aTxBuffer[2];

	aTxBuffer[0] = regAdress;
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	733b      	strb	r3, [r7, #12]
	aTxBuffer[1] = regValue;
 8000ee2:	797b      	ldrb	r3, [r7, #5]
 8000ee4:	737b      	strb	r3, [r7, #13]

    /* -> Start the transmission process */
    /* While the I2C in reception process, user can transmit data through "aTxBuffer" buffer */
    while(HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)(I2c_add<<1),aTxBuffer, (uint16_t)2, (uint32_t)1000)!= HAL_OK)
 8000ee6:	e008      	b.n	8000efa <I2C__vWriteSingleByteBuffer+0x2e>
         * Error_Handler() function is called when Timeout error occurs.
         * When Acknowledge failure occurs (Slave don't acknowledge it's address)
         * Master restarts communication
         */

        if (HAL_I2C_GetError(&I2cHandle) != HAL_I2C_ERROR_AF)
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <I2C__vWriteSingleByteBuffer+0x68>)
 8000eea:	f002 f94f 	bl	800318c <HAL_I2C_GetError>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d002      	beq.n	8000efa <I2C__vWriteSingleByteBuffer+0x2e>
        {
            Error_Handler("Error in I2C write !!!");
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <I2C__vWriteSingleByteBuffer+0x6c>)
 8000ef6:	f000 ff6f 	bl	8001dd8 <Error_Handler>
    while(HAL_I2C_Master_Transmit(&I2cHandle, (uint16_t)(I2c_add<<1),aTxBuffer, (uint16_t)2, (uint32_t)1000)!= HAL_OK)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	b299      	uxth	r1, r3
 8000f02:	f107 020c 	add.w	r2, r7, #12
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <I2C__vWriteSingleByteBuffer+0x68>)
 8000f10:	f001 fe0a 	bl	8002b28 <HAL_I2C_Master_Transmit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1e6      	bne.n	8000ee8 <I2C__vWriteSingleByteBuffer+0x1c>
     * transfer before starting a new one.
     * For simplicity reasons, this example is just waiting till the end of the
     * transfer, but application may perform other tasks while transfer operation
     * is ongoing.
     */
      while (HAL_I2C_GetState(&I2cHandle) != HAL_I2C_STATE_READY)
 8000f1a:	bf00      	nop
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <I2C__vWriteSingleByteBuffer+0x68>)
 8000f1e:	f002 f927 	bl	8003170 <HAL_I2C_GetState>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d1f9      	bne.n	8000f1c <I2C__vWriteSingleByteBuffer+0x50>
      {
      }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000098 	.word	0x20000098
 8000f38:	080056c8 	.word	0x080056c8

08000f3c <_delay_ms>:
//#include "uart_interface.h"


/*create the delay function*/
void _delay_ms(int time)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	volatile int i,j;

	for(i=0;i<time;i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e005      	b.n	8000f56 <_delay_ms+0x1a>
	{
		j++;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
	for(i=0;i<time;i++)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dcf5      	bgt.n	8000f4a <_delay_ms+0xe>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <Init__vMPU_9255>:

void Init__vMPU_9255(uint8_t u8asax[3])
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	/*used to validate the I2C writing by reading back the register value*/
	uint8_t u8destVal;
	uint8_t u8sensMagVal[3] = {0};
 8000f74:	4bbe      	ldr	r3, [pc, #760]	; (8001270 <Init__vMPU_9255+0x304>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	81bb      	strh	r3, [r7, #12]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]


	/*tie the clock source to X axis of the gyro for a better accuracy*/
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_PWR_MGMNT_1,INIT_BYTE_107);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	216b      	movs	r1, #107	; 0x6b
 8000f82:	2068      	movs	r0, #104	; 0x68
 8000f84:	f7ff ffa2 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_PWR_MGMNT_1,&u8destVal,1);
 8000f88:	f107 020f 	add.w	r2, r7, #15
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	216b      	movs	r1, #107	; 0x6b
 8000f90:	2068      	movs	r0, #104	; 0x68
 8000f92:	f7ff ff2d 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_107)
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d103      	bne.n	8000fa4 <Init__vMPU_9255+0x38>
	{
		printf("\r\nMPU clock source configuration...[ OK ]\r\n");
 8000f9c:	48b5      	ldr	r0, [pc, #724]	; (8001274 <Init__vMPU_9255+0x308>)
 8000f9e:	f003 ff17 	bl	8004dd0 <puts>
 8000fa2:	e002      	b.n	8000faa <Init__vMPU_9255+0x3e>
	}
	else
	{
		printf("\r\nMPU clock source configuration...[ NOK ]\r\n");
 8000fa4:	48b4      	ldr	r0, [pc, #720]	; (8001278 <Init__vMPU_9255+0x30c>)
 8000fa6:	f003 ff13 	bl	8004dd0 <puts>
	}

	/*select accelerometer scale to 4g*/
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_ACCEL_CONFIG_1,INIT_BYTE_28);
 8000faa:	2208      	movs	r2, #8
 8000fac:	211c      	movs	r1, #28
 8000fae:	2068      	movs	r0, #104	; 0x68
 8000fb0:	f7ff ff8c 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_ACCEL_CONFIG_1,&u8destVal,1);
 8000fb4:	f107 020f 	add.w	r2, r7, #15
 8000fb8:	2301      	movs	r3, #1
 8000fba:	211c      	movs	r1, #28
 8000fbc:	2068      	movs	r0, #104	; 0x68
 8000fbe:	f7ff ff17 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_28)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d103      	bne.n	8000fd0 <Init__vMPU_9255+0x64>
	{
		printf("\r\nMPU accelerometer scale configuration...[ OK ]\r\n");
 8000fc8:	48ac      	ldr	r0, [pc, #688]	; (800127c <Init__vMPU_9255+0x310>)
 8000fca:	f003 ff01 	bl	8004dd0 <puts>
 8000fce:	e002      	b.n	8000fd6 <Init__vMPU_9255+0x6a>
	}
	else
	{
		printf("\r\nMPU accelerometer scale configuration...[ NOK ]\r\n");
 8000fd0:	48ab      	ldr	r0, [pc, #684]	; (8001280 <Init__vMPU_9255+0x314>)
 8000fd2:	f003 fefd 	bl	8004dd0 <puts>
	}

	/*select gyroscope scale to 500 dg/sec and FCHOI*/
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_GYRO_CONFIG,INIT_BYTE_27);
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	211b      	movs	r1, #27
 8000fda:	2068      	movs	r0, #104	; 0x68
 8000fdc:	f7ff ff76 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_GYRO_CONFIG,&u8destVal,1);
 8000fe0:	f107 020f 	add.w	r2, r7, #15
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	211b      	movs	r1, #27
 8000fe8:	2068      	movs	r0, #104	; 0x68
 8000fea:	f7ff ff01 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_27)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b08      	cmp	r3, #8
 8000ff2:	d103      	bne.n	8000ffc <Init__vMPU_9255+0x90>
	{
		printf("\r\nMPU gyroscope scale configuration...[ OK ]\r\n");
 8000ff4:	48a3      	ldr	r0, [pc, #652]	; (8001284 <Init__vMPU_9255+0x318>)
 8000ff6:	f003 feeb 	bl	8004dd0 <puts>
 8000ffa:	e002      	b.n	8001002 <Init__vMPU_9255+0x96>
	}
	else
	{
		printf("\r\nMPU gyroscope scale configuration...[ NOK ]\r\n");
 8000ffc:	48a2      	ldr	r0, [pc, #648]	; (8001288 <Init__vMPU_9255+0x31c>)
 8000ffe:	f003 fee7 	bl	8004dd0 <puts>
	}

	/*turn on the low pass filter for the accelerometer 10Hz bandwidth */
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_ACCEL_CONFIG_2,INIT_BYTE_29);
 8001002:	2205      	movs	r2, #5
 8001004:	211d      	movs	r1, #29
 8001006:	2068      	movs	r0, #104	; 0x68
 8001008:	f7ff ff60 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_ACCEL_CONFIG_2,&u8destVal,1);
 800100c:	f107 020f 	add.w	r2, r7, #15
 8001010:	2301      	movs	r3, #1
 8001012:	211d      	movs	r1, #29
 8001014:	2068      	movs	r0, #104	; 0x68
 8001016:	f7ff feeb 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_29)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d103      	bne.n	8001028 <Init__vMPU_9255+0xbc>
	{
		printf("\r\nMPU accelerometer filter configuration...[ OK ]\r\n");
 8001020:	489a      	ldr	r0, [pc, #616]	; (800128c <Init__vMPU_9255+0x320>)
 8001022:	f003 fed5 	bl	8004dd0 <puts>
 8001026:	e002      	b.n	800102e <Init__vMPU_9255+0xc2>
	}
	else
	{
		printf("\r\nMPU accelerometer filter configuration...[ NOK ]\r\n");
 8001028:	4899      	ldr	r0, [pc, #612]	; (8001290 <Init__vMPU_9255+0x324>)
 800102a:	f003 fed1 	bl	8004dd0 <puts>
	}

	/*turn on the low pass filter for the gyroscope 10Hz bandwidth */
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_6050_CONFIG,INIT_BYTE_26);
 800102e:	2205      	movs	r2, #5
 8001030:	211a      	movs	r1, #26
 8001032:	2068      	movs	r0, #104	; 0x68
 8001034:	f7ff ff4a 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_6050_CONFIG,&u8destVal,1);
 8001038:	f107 020f 	add.w	r2, r7, #15
 800103c:	2301      	movs	r3, #1
 800103e:	211a      	movs	r1, #26
 8001040:	2068      	movs	r0, #104	; 0x68
 8001042:	f7ff fed5 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_26)
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d103      	bne.n	8001054 <Init__vMPU_9255+0xe8>
	{
		printf("\r\nMPU gyroscope filter configuration...[ OK ]\r\n");
 800104c:	4891      	ldr	r0, [pc, #580]	; (8001294 <Init__vMPU_9255+0x328>)
 800104e:	f003 febf 	bl	8004dd0 <puts>
 8001052:	e002      	b.n	800105a <Init__vMPU_9255+0xee>
	}
	else
	{
		printf("\r\nMPU gyroscope filter configuration...[ NOK ]\r\n");
 8001054:	4890      	ldr	r0, [pc, #576]	; (8001298 <Init__vMPU_9255+0x32c>)
 8001056:	f003 febb 	bl	8004dd0 <puts>
	}


	/*disable I2C master interface.Precondition to enable bypass multiplexer of the I2C master interface*/
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_USER_CTRL,INIT_BYTE_106);
 800105a:	2200      	movs	r2, #0
 800105c:	216a      	movs	r1, #106	; 0x6a
 800105e:	2068      	movs	r0, #104	; 0x68
 8001060:	f7ff ff34 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_USER_CTRL,&u8destVal,1);
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	2301      	movs	r3, #1
 800106a:	216a      	movs	r1, #106	; 0x6a
 800106c:	2068      	movs	r0, #104	; 0x68
 800106e:	f7ff febf 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_106)
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <Init__vMPU_9255+0x114>
	{
		printf("\r\nMPU I2C master disabled...[ OK ]\r\n");
 8001078:	4888      	ldr	r0, [pc, #544]	; (800129c <Init__vMPU_9255+0x330>)
 800107a:	f003 fea9 	bl	8004dd0 <puts>
 800107e:	e002      	b.n	8001086 <Init__vMPU_9255+0x11a>
	}
	else
	{
		printf("\r\nMPU I2C master disabled...[ NOK ]\r\n");
 8001080:	4887      	ldr	r0, [pc, #540]	; (80012a0 <Init__vMPU_9255+0x334>)
 8001082:	f003 fea5 	bl	8004dd0 <puts>
	}

	/*enable I2C master interface bypass multiplexer*/
	I2C__vWriteSingleByteBuffer(MPU_9255_ADDRESS,MPU_9255_INT_BYPASS_CONFIG,INIT_BYTE_55);
 8001086:	2202      	movs	r2, #2
 8001088:	2137      	movs	r1, #55	; 0x37
 800108a:	2068      	movs	r0, #104	; 0x68
 800108c:	f7ff ff1e 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_INT_BYPASS_CONFIG,&u8destVal,1);
 8001090:	f107 020f 	add.w	r2, r7, #15
 8001094:	2301      	movs	r3, #1
 8001096:	2137      	movs	r1, #55	; 0x37
 8001098:	2068      	movs	r0, #104	; 0x68
 800109a:	f7ff fea9 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_55)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d103      	bne.n	80010ac <Init__vMPU_9255+0x140>
	{
		printf("\r\nMPU I2C bypass mux enabled...[ OK ]\r\n");
 80010a4:	487f      	ldr	r0, [pc, #508]	; (80012a4 <Init__vMPU_9255+0x338>)
 80010a6:	f003 fe93 	bl	8004dd0 <puts>
 80010aa:	e002      	b.n	80010b2 <Init__vMPU_9255+0x146>
	}
	else
	{
		printf("\r\nMPU I2C bypass mux enabled...[ NOK ]\r\n");
 80010ac:	487e      	ldr	r0, [pc, #504]	; (80012a8 <Init__vMPU_9255+0x33c>)
 80010ae:	f003 fe8f 	bl	8004dd0 <puts>
	}

	/*setup the magnetometer:Fuse ROM access mode and 16 bit output*/
	I2C__vWriteSingleByteBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,INIT_BYTE_MAG_10);
 80010b2:	221f      	movs	r2, #31
 80010b4:	210a      	movs	r1, #10
 80010b6:	200c      	movs	r0, #12
 80010b8:	f7ff ff08 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	_delay_ms(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f7ff ff3c 	bl	8000f3c <_delay_ms>
	I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,&u8destVal,1);
 80010c4:	f107 020f 	add.w	r2, r7, #15
 80010c8:	2301      	movs	r3, #1
 80010ca:	210a      	movs	r1, #10
 80010cc:	200c      	movs	r0, #12
 80010ce:	f7ff fe8f 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == INIT_BYTE_MAG_10)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b1f      	cmp	r3, #31
 80010d6:	d103      	bne.n	80010e0 <Init__vMPU_9255+0x174>
	{
		printf("\r\nMPU magnetometer fuse mode...[ OK ]\r\n");
 80010d8:	4874      	ldr	r0, [pc, #464]	; (80012ac <Init__vMPU_9255+0x340>)
 80010da:	f003 fe79 	bl	8004dd0 <puts>
 80010de:	e002      	b.n	80010e6 <Init__vMPU_9255+0x17a>
	}
	else
	{
		printf("\r\nMPU magnetometer fuse mode...[ NOK ]\r\n");
 80010e0:	4873      	ldr	r0, [pc, #460]	; (80012b0 <Init__vMPU_9255+0x344>)
 80010e2:	f003 fe75 	bl	8004dd0 <puts>
	}

	/*read the sensitivity adjustment values*/
	I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_ASAX_CONFIG,u8sensMagVal,3);
 80010e6:	f107 020c 	add.w	r2, r7, #12
 80010ea:	2303      	movs	r3, #3
 80010ec:	2110      	movs	r1, #16
 80010ee:	200c      	movs	r0, #12
 80010f0:	f7ff fe7e 	bl	8000df0 <I2C__vReadBuffer>

	u8asax[0] = (u8sensMagVal[0]-128)*0.5/128+1;
 80010f4:	7b3b      	ldrb	r3, [r7, #12]
 80010f6:	3b80      	subs	r3, #128	; 0x80
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f9bf 	bl	800047c <__aeabi_i2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <Init__vMPU_9255+0x348>)
 8001104:	f7ff fa24 	bl	8000550 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <Init__vMPU_9255+0x34c>)
 8001116:	f7ff fb45 	bl	80007a4 <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <Init__vMPU_9255+0x350>)
 8001128:	f7ff f85c 	bl	80001e4 <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fc1e 	bl	8000974 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	b2da      	uxtb	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	701a      	strb	r2, [r3, #0]
	u8asax[1] = (u8sensMagVal[1]-128)*0.5/128+1;
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	3b80      	subs	r3, #128	; 0x80
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f999 	bl	800047c <__aeabi_i2d>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <Init__vMPU_9255+0x348>)
 8001150:	f7ff f9fe 	bl	8000550 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <Init__vMPU_9255+0x34c>)
 8001162:	f7ff fb1f 	bl	80007a4 <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b52      	ldr	r3, [pc, #328]	; (80012bc <Init__vMPU_9255+0x350>)
 8001174:	f7ff f836 	bl	80001e4 <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c5c      	adds	r4, r3, #1
 8001184:	f7ff fbf6 	bl	8000974 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	7023      	strb	r3, [r4, #0]
	u8asax[2] = (u8sensMagVal[2]-128)*0.5/128+1;
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	3b80      	subs	r3, #128	; 0x80
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f972 	bl	800047c <__aeabi_i2d>
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <Init__vMPU_9255+0x348>)
 800119e:	f7ff f9d7 	bl	8000550 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <Init__vMPU_9255+0x34c>)
 80011b0:	f7ff faf8 	bl	80007a4 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <Init__vMPU_9255+0x350>)
 80011c2:	f7ff f80f 	bl	80001e4 <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1c9c      	adds	r4, r3, #2
 80011d2:	f7ff fbcf 	bl	8000974 <__aeabi_d2uiz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	7023      	strb	r3, [r4, #0]

	/*reset the magnetometer to power down mode*/
	I2C__vWriteSingleByteBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,RESET_BYTE_MAG_10);
 80011dc:	2200      	movs	r2, #0
 80011de:	210a      	movs	r1, #10
 80011e0:	200c      	movs	r0, #12
 80011e2:	f7ff fe73 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	_delay_ms(1000);
 80011e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ea:	f7ff fea7 	bl	8000f3c <_delay_ms>
	I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,&u8destVal,1);
 80011ee:	f107 020f 	add.w	r2, r7, #15
 80011f2:	2301      	movs	r3, #1
 80011f4:	210a      	movs	r1, #10
 80011f6:	200c      	movs	r0, #12
 80011f8:	f7ff fdfa 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == RESET_BYTE_MAG_10)
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <Init__vMPU_9255+0x29e>
	{
		printf("\r\nMPU magnetometer reset...[ OK ]\r\n");
 8001202:	482f      	ldr	r0, [pc, #188]	; (80012c0 <Init__vMPU_9255+0x354>)
 8001204:	f003 fde4 	bl	8004dd0 <puts>
 8001208:	e002      	b.n	8001210 <Init__vMPU_9255+0x2a4>
	}
	else
	{
		printf("\r\nMPU magnetometer reset...[ NOK ]\r\n");
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <Init__vMPU_9255+0x358>)
 800120c:	f003 fde0 	bl	8004dd0 <puts>
	}

	/*enable chip to continuous mode 2(100Hz) and 16-bit output*/
	I2C__vWriteSingleByteBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,RESET_BYTE_MAG_MODE2_10);
 8001210:	2216      	movs	r2, #22
 8001212:	210a      	movs	r1, #10
 8001214:	200c      	movs	r0, #12
 8001216:	f7ff fe59 	bl	8000ecc <I2C__vWriteSingleByteBuffer>
	_delay_ms(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f7ff fe8d 	bl	8000f3c <_delay_ms>
	I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_CONTROL_CONFIG,&u8destVal,1);
 8001222:	f107 020f 	add.w	r2, r7, #15
 8001226:	2301      	movs	r3, #1
 8001228:	210a      	movs	r1, #10
 800122a:	200c      	movs	r0, #12
 800122c:	f7ff fde0 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == RESET_BYTE_MAG_MODE2_10)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b16      	cmp	r3, #22
 8001234:	d103      	bne.n	800123e <Init__vMPU_9255+0x2d2>
	{
		printf("\r\nMPU magnetometer reset mode 2 and 16 bit output...[ OK ]\r\n");
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <Init__vMPU_9255+0x35c>)
 8001238:	f003 fdca 	bl	8004dd0 <puts>
 800123c:	e002      	b.n	8001244 <Init__vMPU_9255+0x2d8>
	}
	else
	{
		printf("\r\nMPU magnetometer reset mode 2 and 16 bit output...[ NOK ]\r\n");
 800123e:	4823      	ldr	r0, [pc, #140]	; (80012cc <Init__vMPU_9255+0x360>)
 8001240:	f003 fdc6 	bl	8004dd0 <puts>
	}


	I2C__vReadBuffer(MPU_9255_ADDRESS,117,&u8destVal,1);
 8001244:	f107 020f 	add.w	r2, r7, #15
 8001248:	2301      	movs	r3, #1
 800124a:	2175      	movs	r1, #117	; 0x75
 800124c:	2068      	movs	r0, #104	; 0x68
 800124e:	f7ff fdcf 	bl	8000df0 <I2C__vReadBuffer>

	if (u8destVal == 0x73)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b73      	cmp	r3, #115	; 0x73
 8001256:	d103      	bne.n	8001260 <Init__vMPU_9255+0x2f4>
	{
		printf("\r\nWho am I...[ OK ]\r\n");
 8001258:	481d      	ldr	r0, [pc, #116]	; (80012d0 <Init__vMPU_9255+0x364>)
 800125a:	f003 fdb9 	bl	8004dd0 <puts>
	}
	else
	{
		printf("\r\nWho am I...[ NOK ]\r\n");
	}
}
 800125e:	e002      	b.n	8001266 <Init__vMPU_9255+0x2fa>
		printf("\r\nWho am I...[ NOK ]\r\n");
 8001260:	481c      	ldr	r0, [pc, #112]	; (80012d4 <Init__vMPU_9255+0x368>)
 8001262:	f003 fdb5 	bl	8004dd0 <puts>
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	08005aa8 	.word	0x08005aa8
 8001274:	080056e0 	.word	0x080056e0
 8001278:	0800570c 	.word	0x0800570c
 800127c:	08005738 	.word	0x08005738
 8001280:	0800576c 	.word	0x0800576c
 8001284:	080057a0 	.word	0x080057a0
 8001288:	080057d0 	.word	0x080057d0
 800128c:	08005800 	.word	0x08005800
 8001290:	08005834 	.word	0x08005834
 8001294:	08005868 	.word	0x08005868
 8001298:	08005898 	.word	0x08005898
 800129c:	080058c8 	.word	0x080058c8
 80012a0:	080058ec 	.word	0x080058ec
 80012a4:	08005914 	.word	0x08005914
 80012a8:	0800593c 	.word	0x0800593c
 80012ac:	08005964 	.word	0x08005964
 80012b0:	0800598c 	.word	0x0800598c
 80012b4:	3fe00000 	.word	0x3fe00000
 80012b8:	40600000 	.word	0x40600000
 80012bc:	3ff00000 	.word	0x3ff00000
 80012c0:	080059b4 	.word	0x080059b4
 80012c4:	080059d8 	.word	0x080059d8
 80012c8:	080059fc 	.word	0x080059fc
 80012cc:	08005a38 	.word	0x08005a38
 80012d0:	08005a78 	.word	0x08005a78
 80012d4:	08005a90 	.word	0x08005a90

080012d8 <GetData__stMPU_9255>:


IMU_tstImuData GetData__stMPU_9255()
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b098      	sub	sp, #96	; 0x60
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint8_t u8ImuAccelGyroRawData[14] = {0};
 80012e0:	2300      	movs	r3, #0
 80012e2:	653b      	str	r3, [r7, #80]	; 0x50
 80012e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	811a      	strh	r2, [r3, #8]
	int16_t int16FinalImuRawData[10]={0};
 80012f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
	IMU_tstImuData IMUstRawData;
	uint8_t u8drdybit = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	74fb      	strb	r3, [r7, #19]
	uint8_t u8magData[7] = {0}; //last byte is HOFL from status register 2
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2100      	movs	r1, #0
 800130e:	460a      	mov	r2, r1
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	460a      	mov	r2, r1
 8001314:	709a      	strb	r2, [r3, #2]


	I2C__vReadBuffer(MPU_9255_ADDRESS,MPU_9255_ACCEL_X_H,u8ImuAccelGyroRawData,14);
 8001316:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800131a:	230e      	movs	r3, #14
 800131c:	213b      	movs	r1, #59	; 0x3b
 800131e:	2068      	movs	r0, #104	; 0x68
 8001320:	f7ff fd66 	bl	8000df0 <I2C__vReadBuffer>

	int16FinalImuRawData[0] = (u8ImuAccelGyroRawData[0]<<8)|(u8ImuAccelGyroRawData[1]); //acc_x
 8001324:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int16FinalImuRawData[1] = (u8ImuAccelGyroRawData[2]<<8)|(u8ImuAccelGyroRawData[3]); //acc_y
 8001338:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16FinalImuRawData[2] = (u8ImuAccelGyroRawData[4]<<8)|(u8ImuAccelGyroRawData[5]); //acc_z
 800134c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21b      	sxth	r3, r3
 800135e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	int16FinalImuRawData[3] = (u8ImuAccelGyroRawData[6]<<8)|(u8ImuAccelGyroRawData[7]); //temperature
 8001362:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21a      	sxth	r2, r3
 800136a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	int16FinalImuRawData[4] = (u8ImuAccelGyroRawData[8]<<8)|(u8ImuAccelGyroRawData[9]); //gyro_x
 8001378:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001384:	b21b      	sxth	r3, r3
 8001386:	4313      	orrs	r3, r2
 8001388:	b21b      	sxth	r3, r3
 800138a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16FinalImuRawData[5] = (u8ImuAccelGyroRawData[10]<<8)|(u8ImuAccelGyroRawData[11]); //gyro_y
 800138e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b21b      	sxth	r3, r3
 80013a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16FinalImuRawData[6] = (u8ImuAccelGyroRawData[12]<<8)|(u8ImuAccelGyroRawData[13]); //gyro_z
 80013a4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	/*read DRDY bit from Status 1 register to check if the data in ready "1" ready "0" not ready  */
	I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_STATUS_1_CONFIG,&u8drdybit,1);
 80013ba:	f107 0213 	add.w	r2, r7, #19
 80013be:	2301      	movs	r3, #1
 80013c0:	2102      	movs	r1, #2
 80013c2:	200c      	movs	r0, #12
 80013c4:	f7ff fd14 	bl	8000df0 <I2C__vReadBuffer>

	if ((u8drdybit & MPU_9255_DATA_READY_MASK ) == MPU_9255_DATA_READY)
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d026      	beq.n	8001420 <GetData__stMPU_9255+0x148>
	{
		I2C__vReadBuffer(MPU_9255_AK8963_DEVICE_ID,MPU_9255_MAG_HXL_AD,u8magData,7);
 80013d2:	f107 020c 	add.w	r2, r7, #12
 80013d6:	2307      	movs	r3, #7
 80013d8:	2103      	movs	r1, #3
 80013da:	200c      	movs	r0, #12
 80013dc:	f7ff fd08 	bl	8000df0 <I2C__vReadBuffer>

		/*check if magnetic sensor is overflow: If yes discard the reading*/

		if (!(u8magData[6] & MPU_9255_MAGIC_OVERFLOW_MASK))
 80013e0:	7cbb      	ldrb	r3, [r7, #18]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11a      	bne.n	8001420 <GetData__stMPU_9255+0x148>
		{
			int16FinalImuRawData[7] = (u8magData[0] | (u8magData[1]<<8));
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7b7b      	ldrb	r3, [r7, #13]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			int16FinalImuRawData[8] = (u8magData[2] | (u8magData[3]<<8));
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	b21a      	sxth	r2, r3
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			int16FinalImuRawData[9] = (u8magData[4] | (u8magData[5]<<8));
 800140e:	7c3b      	ldrb	r3, [r7, #16]
 8001410:	b21a      	sxth	r2, r3
 8001412:	7c7b      	ldrb	r3, [r7, #17]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21b      	sxth	r3, r3
 800141c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}
	}

	/*copy array data into dedicated structure*/

	IMUstRawData.AccXData  = (float)int16FinalImuRawData[0];
 8001420:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142c:	edc7 7a05 	vstr	s15, [r7, #20]
	IMUstRawData.AccYData  = (float)int16FinalImuRawData[1];
 8001430:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	edc7 7a06 	vstr	s15, [r7, #24]
	IMUstRawData.AccZData  = (float)int16FinalImuRawData[2];
 8001440:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	edc7 7a07 	vstr	s15, [r7, #28]
	IMUstRawData.Temp      = (float)int16FinalImuRawData[3];
 8001450:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145c:	edc7 7a08 	vstr	s15, [r7, #32]
	IMUstRawData.GyroXData = (float)int16FinalImuRawData[4];
 8001460:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	IMUstRawData.GyroYData = (float)int16FinalImuRawData[5];
 8001470:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	IMUstRawData.GyroZData = (float)int16FinalImuRawData[6];
 8001480:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	IMUstRawData.MagXData  = (float)int16FinalImuRawData[7];
 8001490:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	IMUstRawData.MagYData  = (float)int16FinalImuRawData[8];
 80014a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	IMUstRawData.MagZData  = (float)int16FinalImuRawData[9];
 80014b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014bc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	return IMUstRawData;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	461d      	mov	r5, r3
 80014c4:	f107 0414 	add.w	r4, r7, #20
 80014c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014d4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	3760      	adds	r7, #96	; 0x60
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdb0      	pop	{r4, r5, r7, pc}

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 feff 	bl	80022e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f99d 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f000 fc37 	bl	8001d60 <MX_GPIO_Init>
  MX_TIM3_Init();
 80014f2:	f000 fa2f 	bl	8001954 <MX_TIM3_Init>
  MX_TIM5_Init();
 80014f6:	f000 faad 	bl	8001a54 <MX_TIM5_Init>
  MX_TIM9_Init();
 80014fa:	f000 fb21 	bl	8001b40 <MX_TIM9_Init>
  MX_TIM10_Init();
 80014fe:	f000 fb83 	bl	8001c08 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001502:	f000 fbd7 	bl	8001cb4 <MX_TIM11_Init>
  MX_I2C1_Init();
 8001506:	f000 f9f7 	bl	80018f8 <MX_I2C1_Init>
 // mpu_config.Gyro_Full_Scale=FS_SEL_500;//Gyro scale
 // mpu_config.Sleep_Mode_Bit=0;//Not in sleep mode
 // MPU9250_Config(&mpu_config);

  //PWM Configuration and Initialization
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//init timer 3 -->PA6
 800150a:	2100      	movs	r1, #0
 800150c:	48be      	ldr	r0, [pc, #760]	; (8001808 <main+0x328>)
 800150e:	f002 fe53 	bl	80041b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);//init timer 10 -->PB8
 8001512:	2100      	movs	r1, #0
 8001514:	48bd      	ldr	r0, [pc, #756]	; (800180c <main+0x32c>)
 8001516:	f002 fe4f 	bl	80041b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);//init timer 9 -->PA2
 800151a:	2100      	movs	r1, #0
 800151c:	48bc      	ldr	r0, [pc, #752]	; (8001810 <main+0x330>)
 800151e:	f002 fe4b 	bl	80041b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);//init timer 11 -->PB9
 8001522:	2100      	movs	r1, #0
 8001524:	48bb      	ldr	r0, [pc, #748]	; (8001814 <main+0x334>)
 8001526:	f002 fe47 	bl	80041b8 <HAL_TIM_PWM_Start>

  uint8_t u8i = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  	for (u8i = 0; u8i < nInitTotal; u8i++)
 8001530:	2300      	movs	r3, #0
 8001532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001536:	e00b      	b.n	8001550 <main+0x70>
  	{
  		if (u8i == 9)
 8001538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800153c:	2b09      	cmp	r3, #9
 800153e:	d102      	bne.n	8001546 <main+0x66>
  		{
  			Init__vMPU_9255(u8asax);
 8001540:	48b5      	ldr	r0, [pc, #724]	; (8001818 <main+0x338>)
 8001542:	f7ff fd13 	bl	8000f6c <Init__vMPU_9255>
  	for (u8i = 0; u8i < nInitTotal; u8i++)
 8001546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800154a:	3301      	adds	r3, #1
 800154c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001554:	2b0a      	cmp	r3, #10
 8001556:	d9ef      	bls.n	8001538 <main+0x58>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //GenerateCompareValueForPWMMotorControl();
	  myIMUData = GetData__stMPU_9255();
 8001558:	4cb0      	ldr	r4, [pc, #704]	; (800181c <main+0x33c>)
 800155a:	463b      	mov	r3, r7
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff febb 	bl	80012d8 <GetData__stMPU_9255>
 8001562:	4625      	mov	r5, r4
 8001564:	463c      	mov	r4, r7
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	e885 0003 	stmia.w	r5, {r0, r1}

	  	myIMUData.AccXData = (myIMUData.AccXData) / 835.040;
 8001576:	4ba9      	ldr	r3, [pc, #676]	; (800181c <main+0x33c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff90 	bl	80004a0 <__aeabi_f2d>
 8001580:	a399      	add	r3, pc, #612	; (adr r3, 80017e8 <main+0x308>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f90d 	bl	80007a4 <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fa0f 	bl	80009b4 <__aeabi_d2f>
 8001596:	4603      	mov	r3, r0
 8001598:	4aa0      	ldr	r2, [pc, #640]	; (800181c <main+0x33c>)
 800159a:	6013      	str	r3, [r2, #0]
	  	myIMUData.AccYData = (myIMUData.AccYData) / 835.040;
 800159c:	4b9f      	ldr	r3, [pc, #636]	; (800181c <main+0x33c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff7d 	bl	80004a0 <__aeabi_f2d>
 80015a6:	a390      	add	r3, pc, #576	; (adr r3, 80017e8 <main+0x308>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f8fa 	bl	80007a4 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff f9fc 	bl	80009b4 <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a97      	ldr	r2, [pc, #604]	; (800181c <main+0x33c>)
 80015c0:	6053      	str	r3, [r2, #4]
	  	myIMUData.AccZData = (myIMUData.AccZData) / 835.040;
 80015c2:	4b96      	ldr	r3, [pc, #600]	; (800181c <main+0x33c>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ff6a 	bl	80004a0 <__aeabi_f2d>
 80015cc:	a386      	add	r3, pc, #536	; (adr r3, 80017e8 <main+0x308>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f8e7 	bl	80007a4 <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff f9e9 	bl	80009b4 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a8d      	ldr	r2, [pc, #564]	; (800181c <main+0x33c>)
 80015e6:	6093      	str	r3, [r2, #8]
	  	myIMUData.GyroXData = (myIMUData.GyroXData) / 939.650784;
 80015e8:	4b8c      	ldr	r3, [pc, #560]	; (800181c <main+0x33c>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff57 	bl	80004a0 <__aeabi_f2d>
 80015f2:	a37f      	add	r3, pc, #508	; (adr r3, 80017f0 <main+0x310>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f8d4 	bl	80007a4 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff f9d6 	bl	80009b4 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a84      	ldr	r2, [pc, #528]	; (800181c <main+0x33c>)
 800160c:	6113      	str	r3, [r2, #16]
	  	myIMUData.GyroYData = (myIMUData.GyroYData) / 939.650784;
 800160e:	4b83      	ldr	r3, [pc, #524]	; (800181c <main+0x33c>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff44 	bl	80004a0 <__aeabi_f2d>
 8001618:	a375      	add	r3, pc, #468	; (adr r3, 80017f0 <main+0x310>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7ff f8c1 	bl	80007a4 <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f9c3 	bl	80009b4 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	4a7a      	ldr	r2, [pc, #488]	; (800181c <main+0x33c>)
 8001632:	6153      	str	r3, [r2, #20]
	  	myIMUData.GyroZData = (myIMUData.GyroZData) / 939.650784;
 8001634:	4b79      	ldr	r3, [pc, #484]	; (800181c <main+0x33c>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff31 	bl	80004a0 <__aeabi_f2d>
 800163e:	a36c      	add	r3, pc, #432	; (adr r3, 80017f0 <main+0x310>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f8ae 	bl	80007a4 <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff f9b0 	bl	80009b4 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	4a71      	ldr	r2, [pc, #452]	; (800181c <main+0x33c>)
 8001658:	6193      	str	r3, [r2, #24]

	  	myIMUData.AccXData  =  myIMUData.AccXData/835.040; // [SI] = m/s^2
 800165a:	4b70      	ldr	r3, [pc, #448]	; (800181c <main+0x33c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff1e 	bl	80004a0 <__aeabi_f2d>
 8001664:	a360      	add	r3, pc, #384	; (adr r3, 80017e8 <main+0x308>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f89b 	bl	80007a4 <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff f99d 	bl	80009b4 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <main+0x33c>)
 800167e:	6013      	str	r3, [r2, #0]
	  	myIMUData.AccYData  =  myIMUData.AccYData/835.040; // [SI] = m/s^2
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <main+0x33c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff0b 	bl	80004a0 <__aeabi_f2d>
 800168a:	a357      	add	r3, pc, #348	; (adr r3, 80017e8 <main+0x308>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f888 	bl	80007a4 <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f98a 	bl	80009b4 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a5e      	ldr	r2, [pc, #376]	; (800181c <main+0x33c>)
 80016a4:	6053      	str	r3, [r2, #4]
	  	myIMUData.AccZData  =  myIMUData.AccZData/835.040; // [SI] = m/s^2
 80016a6:	4b5d      	ldr	r3, [pc, #372]	; (800181c <main+0x33c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fef8 	bl	80004a0 <__aeabi_f2d>
 80016b0:	a34d      	add	r3, pc, #308	; (adr r3, 80017e8 <main+0x308>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7ff f875 	bl	80007a4 <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f977 	bl	80009b4 <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a54      	ldr	r2, [pc, #336]	; (800181c <main+0x33c>)
 80016ca:	6093      	str	r3, [r2, #8]
	  	myIMUData.Temp 	    =  ((myIMUData.Temp)/333.87) + 21; // [SI] = deg
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <main+0x33c>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fee5 	bl	80004a0 <__aeabi_f2d>
 80016d6:	a348      	add	r3, pc, #288	; (adr r3, 80017f8 <main+0x318>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff f862 	bl	80007a4 <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <main+0x340>)
 80016ee:	f7fe fd79 	bl	80001e4 <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f95b 	bl	80009b4 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a46      	ldr	r2, [pc, #280]	; (800181c <main+0x33c>)
 8001702:	60d3      	str	r3, [r2, #12]
	  	myIMUData.GyroXData =  myIMUData.GyroXData/3756.72; // [SI] = rad/s
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <main+0x33c>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fec9 	bl	80004a0 <__aeabi_f2d>
 800170e:	a33c      	add	r3, pc, #240	; (adr r3, 8001800 <main+0x320>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7ff f846 	bl	80007a4 <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff f948 	bl	80009b4 <__aeabi_d2f>
 8001724:	4603      	mov	r3, r0
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <main+0x33c>)
 8001728:	6113      	str	r3, [r2, #16]
	  	myIMUData.GyroYData =  myIMUData.GyroYData/3756.72; // [SI] = rad/s
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <main+0x33c>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe feb6 	bl	80004a0 <__aeabi_f2d>
 8001734:	a332      	add	r3, pc, #200	; (adr r3, 8001800 <main+0x320>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7ff f833 	bl	80007a4 <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff f935 	bl	80009b4 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	4a33      	ldr	r2, [pc, #204]	; (800181c <main+0x33c>)
 800174e:	6153      	str	r3, [r2, #20]
	  	myIMUData.GyroZData =  myIMUData.GyroZData/3756.72; // [SI] = rad/s
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <main+0x33c>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fea3 	bl	80004a0 <__aeabi_f2d>
 800175a:	a329      	add	r3, pc, #164	; (adr r3, 8001800 <main+0x320>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7ff f820 	bl	80007a4 <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f922 	bl	80009b4 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4a2a      	ldr	r2, [pc, #168]	; (800181c <main+0x33c>)
 8001774:	6193      	str	r3, [r2, #24]
	  	myIMUData.MagXData  =  myIMUData.MagXData * u8asax[0] * 4800; //fixed scale +/-4800 uT
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <main+0x33c>)
 8001778:	ed93 7a07 	vldr	s14, [r3, #28]
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <main+0x338>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001824 <main+0x344>
 8001790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <main+0x33c>)
 8001796:	edc3 7a07 	vstr	s15, [r3, #28]
	  	myIMUData.MagYData  =  myIMUData.MagYData * u8asax[1] * 4800; //fixed scale +/-4800 uT
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <main+0x33c>)
 800179c:	ed93 7a08 	vldr	s14, [r3, #32]
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <main+0x338>)
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001824 <main+0x344>
 80017b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <main+0x33c>)
 80017ba:	edc3 7a08 	vstr	s15, [r3, #32]
	  	myIMUData.MagZData  =  myIMUData.MagZData * u8asax[2] * 4800; //fixed scale +/-4800 uT
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <main+0x33c>)
 80017c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <main+0x338>)
 80017c6:	789b      	ldrb	r3, [r3, #2]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001824 <main+0x344>
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <main+0x33c>)
 80017de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	  myIMUData = GetData__stMPU_9255();
 80017e2:	e6b9      	b.n	8001558 <main+0x78>
 80017e4:	f3af 8000 	nop.w
 80017e8:	eb851eb8 	.word	0xeb851eb8
 80017ec:	408a1851 	.word	0x408a1851
 80017f0:	ce3de615 	.word	0xce3de615
 80017f4:	408d5d34 	.word	0x408d5d34
 80017f8:	851eb852 	.word	0x851eb852
 80017fc:	4074ddeb 	.word	0x4074ddeb
 8001800:	a3d70a3d 	.word	0xa3d70a3d
 8001804:	40ad5970 	.word	0x40ad5970
 8001808:	200001f8 	.word	0x200001f8
 800180c:	20000140 	.word	0x20000140
 8001810:	20000288 	.word	0x20000288
 8001814:	20000240 	.word	0x20000240
 8001818:	200002d0 	.word	0x200002d0
 800181c:	20000188 	.word	0x20000188
 8001820:	40350000 	.word	0x40350000
 8001824:	45960000 	.word	0x45960000

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	; 0x50
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2230      	movs	r2, #48	; 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fa54 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <SystemClock_Config+0xc8>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <SystemClock_Config+0xc8>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <SystemClock_Config+0xcc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <SystemClock_Config+0xcc>)
 8001872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001888:	2301      	movs	r3, #1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800188c:	2310      	movs	r3, #16
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001890:	2302      	movs	r3, #2
 8001892:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001894:	2300      	movs	r3, #0
 8001896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001898:	2308      	movs	r3, #8
 800189a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 800189c:	235a      	movs	r3, #90	; 0x5a
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 ffa7 	bl	8003800 <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b8:	f000 fa8e 	bl	8001dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2102      	movs	r1, #2
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 fa09 	bl	8003cf0 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018e4:	f000 fa78 	bl	8001dd8 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3750      	adds	r7, #80	; 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f000 ffb3 	bl	80028a0 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 fa4a 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200000ec 	.word	0x200000ec
 800194c:	40005400 	.word	0x40005400
 8001950:	00061a80 	.word	0x00061a80

08001954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08e      	sub	sp, #56	; 0x38
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <MX_TIM3_Init+0xfc>)
 8001988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <MX_TIM3_Init+0xf8>)
 800198c:	221b      	movs	r2, #27
 800198e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019aa:	4828      	ldr	r0, [pc, #160]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019ac:	f002 fb5c 	bl	8004068 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019b6:	f000 fa0f 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4821      	ldr	r0, [pc, #132]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019c8:	f002 fd64 	bl	8004494 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019d2:	f000 fa01 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019d6:	481d      	ldr	r0, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019d8:	f002 fb95 	bl	8004106 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019e2:	f000 f9f9 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	4815      	ldr	r0, [pc, #84]	; (8001a4c <MX_TIM3_Init+0xf8>)
 80019f6:	f003 f8dd 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a00:	f000 f9ea 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6553;
 8001a08:	f641 1399 	movw	r3, #6553	; 0x1999
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001a1e:	f002 fc7b 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a28:	f000 f9d6 	bl	8001dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0208 	bic.w	r2, r2, #8
 8001a3a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM3_Init+0xf8>)
 8001a3e:	f000 fa73 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001f8 	.word	0x200001f8
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <MX_TIM5_Init+0xe8>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aaa:	4823      	ldr	r0, [pc, #140]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001aac:	f002 fadc 	bl	8004068 <HAL_TIM_Base_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001ab6:	f000 f98f 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481c      	ldr	r0, [pc, #112]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001ac8:	f002 fce4 	bl	8004494 <HAL_TIM_ConfigClockSource>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001ad2:	f000 f981 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001ad8:	f002 fb15 	bl	8004106 <HAL_TIM_PWM_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001ae2:	f000 f979 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	4619      	mov	r1, r3
 8001af4:	4810      	ldr	r0, [pc, #64]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001af6:	f003 f85d 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001b00:	f000 f96a 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b04:	2360      	movs	r3, #96	; 0x60
 8001b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4807      	ldr	r0, [pc, #28]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001b1c:	f002 fbfc 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001b26:	f000 f957 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b2a:	4803      	ldr	r0, [pc, #12]	; (8001b38 <MX_TIM5_Init+0xe4>)
 8001b2c:	f000 f9fc 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001b30:	bf00      	nop
 8001b32:	3738      	adds	r7, #56	; 0x38
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	200001b0 	.word	0x200001b0
 8001b3c:	40000c00 	.word	0x40000c00

08001b40 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	615a      	str	r2, [r3, #20]
 8001b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <MX_TIM9_Init+0xc4>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 27;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b6e:	221b      	movs	r2, #27
 8001b70:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001b8e:	f002 fa6b 	bl	8004068 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001b98:	f000 f91e 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4815      	ldr	r0, [pc, #84]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001baa:	f002 fc73 	bl	8004494 <HAL_TIM_ConfigClockSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001bb4:	f000 f910 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001bba:	f002 faa4 	bl	8004106 <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001bc4:	f000 f908 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	; 0x60
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6553;
 8001bcc:	f641 1399 	movw	r3, #6553	; 0x1999
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001be2:	f002 fb99 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001bec:	f000 f8f4 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM9_Init+0xc0>)
 8001bf2:	f000 f999 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000288 	.word	0x20000288
 8001c04:	40014000 	.word	0x40014000

08001c08 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c22:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <MX_TIM10_Init+0xa8>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 27;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c28:	221b      	movs	r2, #27
 8001c2a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c46:	4819      	ldr	r0, [pc, #100]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c48:	f002 fa0e 	bl	8004068 <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001c52:	f000 f8c1 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001c56:	4815      	ldr	r0, [pc, #84]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c58:	f002 fa55 	bl	8004106 <HAL_TIM_PWM_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001c62:	f000 f8b9 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c66:	2360      	movs	r3, #96	; 0x60
 8001c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6553;
 8001c6a:	f641 1399 	movw	r3, #6553	; 0x1999
 8001c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480b      	ldr	r0, [pc, #44]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c80:	f002 fb4a 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001c8a:	f000 f8a5 	bl	8001dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim10, TIM_CHANNEL_1);
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0208 	bic.w	r2, r2, #8
 8001c9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001c9e:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM10_Init+0xa4>)
 8001ca0:	f000 f942 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000140 	.word	0x20000140
 8001cb0:	40014400 	.word	0x40014400

08001cb4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001cce:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <MX_TIM11_Init+0xa8>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 27;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001cd4:	221b      	movs	r2, #27
 8001cd6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001cf2:	4819      	ldr	r0, [pc, #100]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001cf4:	f002 f9b8 	bl	8004068 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001cfe:	f000 f86b 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001d04:	f002 f9ff 	bl	8004106 <HAL_TIM_PWM_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001d0e:	f000 f863 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d12:	2360      	movs	r3, #96	; 0x60
 8001d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6553;
 8001d16:	f641 1399 	movw	r3, #6553	; 0x1999
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480b      	ldr	r0, [pc, #44]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001d2c:	f002 faf4 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8001d36:	f000 f84f 	bl	8001dd8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim11, TIM_CHANNEL_1);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001d4a:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM11_Init+0xa4>)
 8001d4c:	f000 f8ec 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000240 	.word	0x20000240
 8001d5c:	40014800 	.word	0x40014800

08001d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_GPIO_Init+0x70>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_GPIO_Init+0x74>)
 8001dc4:	f000 fbe8 	bl	8002598 <HAL_GPIO_Init>

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <Error_Handler+0x8>
	...

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <HAL_MspInit+0x4c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <HAL_TIM_Base_MspInit+0xdc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e62:	e04e      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_TIM_Base_MspInit+0xe4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
}
 8001e8a:	e03a      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM9)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_TIM_Base_MspInit+0xe8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	e026      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_TIM_Base_MspInit+0xec>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	e012      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM11)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_TIM_Base_MspInit+0xf0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10d      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40000c00 	.word	0x40000c00
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800

08001f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <HAL_TIM_MspPostInit+0x18c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11e      	bne.n	8001f88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f76:	2302      	movs	r3, #2
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	484e      	ldr	r0, [pc, #312]	; (80020bc <HAL_TIM_MspPostInit+0x194>)
 8001f82:	f000 fb09 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001f86:	e090      	b.n	80020aa <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a4c      	ldr	r2, [pc, #304]	; (80020c0 <HAL_TIM_MspPostInit+0x198>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d11e      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	483c      	ldr	r0, [pc, #240]	; (80020bc <HAL_TIM_MspPostInit+0x194>)
 8001fca:	f000 fae5 	bl	8002598 <HAL_GPIO_Init>
}
 8001fce:	e06c      	b.n	80020aa <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM9)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3b      	ldr	r2, [pc, #236]	; (80020c4 <HAL_TIM_MspPostInit+0x19c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11e      	bne.n	8002018 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a35      	ldr	r2, [pc, #212]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002006:	2303      	movs	r3, #3
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	482a      	ldr	r0, [pc, #168]	; (80020bc <HAL_TIM_MspPostInit+0x194>)
 8002012:	f000 fac1 	bl	8002598 <HAL_GPIO_Init>
}
 8002016:	e048      	b.n	80020aa <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM10)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_TIM_MspPostInit+0x1a0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11f      	bne.n	8002062 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002050:	2303      	movs	r3, #3
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	4619      	mov	r1, r3
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <HAL_TIM_MspPostInit+0x1a4>)
 800205c:	f000 fa9c 	bl	8002598 <HAL_GPIO_Init>
}
 8002060:	e023      	b.n	80020aa <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM11)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_TIM_MspPostInit+0x1a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d11e      	bne.n	80020aa <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_TIM_MspPostInit+0x190>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800209a:	2303      	movs	r3, #3
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_TIM_MspPostInit+0x1a4>)
 80020a6:	f000 fa77 	bl	8002598 <HAL_GPIO_Init>
}
 80020aa:	bf00      	nop
 80020ac:	3730      	adds	r7, #48	; 0x30
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40000c00 	.word	0x40000c00
 80020c4:	40014000 	.word	0x40014000
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40014800 	.word	0x40014800

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 f934 	bl	800238c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e00a      	b.n	8002150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800213a:	f3af 8000 	nop.w
 800213e:	4601      	mov	r1, r0
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	b2ca      	uxtb	r2, r1
 8002148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf0      	blt.n	800213a <_read+0x12>
	}

return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	e009      	b.n	8002188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	60ba      	str	r2, [r7, #8]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbf1      	blt.n	8002174 <_write+0x12>
	}
	return len;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_close>:

int _close(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return -1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021c2:	605a      	str	r2, [r3, #4]
	return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_isatty>:

int _isatty(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
	return 1;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	return 0;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <_sbrk+0x5c>)
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <_sbrk+0x60>)
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <_sbrk+0x64>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <_sbrk+0x68>)
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002234:	f002 fd2c 	bl	8004c90 <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20020000 	.word	0x20020000
 8002264:	00000400 	.word	0x00000400
 8002268:	2000008c 	.word	0x2000008c
 800226c:	200002e8 	.word	0x200002e8

08002270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <SystemInit+0x20>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <SystemInit+0x20>)
 800227c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229a:	490e      	ldr	r1, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b0:	4c0b      	ldr	r4, [pc, #44]	; (80022e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022be:	f7ff ffd7 	bl	8002270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f002 fceb 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c6:	f7ff f90b 	bl	80014e0 <main>
  bx  lr    
 80022ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022d8:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 80022dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022e0:	200002e8 	.word	0x200002e8

080022e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC_IRQHandler>
	...

080022e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_Init+0x40>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_Init+0x40>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_Init+0x40>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f000 f90d 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 f808 	bl	800232c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800231c:	f7ff fd62 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_InitTick+0x54>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_InitTick+0x58>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	fbb3 f3f1 	udiv	r3, r3, r1
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f917 	bl	800257e <HAL_SYSTICK_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e00e      	b.n	8002378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0f      	cmp	r3, #15
 800235e:	d80a      	bhi.n	8002376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002360:	2200      	movs	r2, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f000 f8ed 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <HAL_InitTick+0x5c>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000000 	.word	0x20000000
 8002384:	20000008 	.word	0x20000008
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_IncTick+0x20>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_IncTick+0x24>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4413      	add	r3, r2
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_IncTick+0x24>)
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008
 80023b0:	200002d4 	.word	0x200002d4

080023b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return uwTick;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_GetTick+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200002d4 	.word	0x200002d4

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff8e 	bl	8002430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff47 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff5c 	bl	8002414 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff8e 	bl	8002484 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5d 	bl	8002430 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffb0 	bl	80024ec <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e159      	b.n	8002868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8148 	bne.w	8002862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d005      	beq.n	80025ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d130      	bne.n	800264c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0201 	and.w	r2, r3, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d017      	beq.n	8002688 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d123      	bne.n	80026dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	69b9      	ldr	r1, [r7, #24]
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a2 	beq.w	8002862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b57      	ldr	r3, [pc, #348]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a56      	ldr	r2, [pc, #344]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b54      	ldr	r3, [pc, #336]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x2ec>)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a49      	ldr	r2, [pc, #292]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0x202>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a48      	ldr	r2, [pc, #288]	; (800288c <HAL_GPIO_Init+0x2f4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x1fe>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a47      	ldr	r2, [pc, #284]	; (8002890 <HAL_GPIO_Init+0x2f8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x1fa>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a46      	ldr	r2, [pc, #280]	; (8002894 <HAL_GPIO_Init+0x2fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x1f6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a45      	ldr	r2, [pc, #276]	; (8002898 <HAL_GPIO_Init+0x300>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x1f2>
 8002786:	2304      	movs	r3, #4
 8002788:	e008      	b.n	800279c <HAL_GPIO_Init+0x204>
 800278a:	2307      	movs	r3, #7
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x204>
 800278e:	2303      	movs	r3, #3
 8002790:	e004      	b.n	800279c <HAL_GPIO_Init+0x204>
 8002792:	2302      	movs	r3, #2
 8002794:	e002      	b.n	800279c <HAL_GPIO_Init+0x204>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_GPIO_Init+0x204>
 800279a:	2300      	movs	r3, #0
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	f002 0203 	and.w	r2, r2, #3
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	4093      	lsls	r3, r2
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_GPIO_Init+0x2ec>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ba:	4b38      	ldr	r3, [pc, #224]	; (800289c <HAL_GPIO_Init+0x304>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027de:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_GPIO_Init+0x304>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_GPIO_Init+0x304>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002808:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_GPIO_Init+0x304>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_GPIO_Init+0x304>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <HAL_GPIO_Init+0x304>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_GPIO_Init+0x304>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_GPIO_Init+0x304>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3301      	adds	r3, #1
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	f67f aea2 	bls.w	80025b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40013800 	.word	0x40013800
 8002888:	40020000 	.word	0x40020000
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40021000 	.word	0x40021000
 800289c:	40013c00 	.word	0x40013c00

080028a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e12b      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fa40 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002904:	f001 fb9c 	bl	8004040 <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a81      	ldr	r2, [pc, #516]	; (8002b14 <HAL_I2C_Init+0x274>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d807      	bhi.n	8002924 <HAL_I2C_Init+0x84>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a80      	ldr	r2, [pc, #512]	; (8002b18 <HAL_I2C_Init+0x278>)
 8002918:	4293      	cmp	r3, r2
 800291a:	bf94      	ite	ls
 800291c:	2301      	movls	r3, #1
 800291e:	2300      	movhi	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e006      	b.n	8002932 <HAL_I2C_Init+0x92>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4a7d      	ldr	r2, [pc, #500]	; (8002b1c <HAL_I2C_Init+0x27c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	bf94      	ite	ls
 800292c:	2301      	movls	r3, #1
 800292e:	2300      	movhi	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0e7      	b.n	8002b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a78      	ldr	r2, [pc, #480]	; (8002b20 <HAL_I2C_Init+0x280>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a6a      	ldr	r2, [pc, #424]	; (8002b14 <HAL_I2C_Init+0x274>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d802      	bhi.n	8002974 <HAL_I2C_Init+0xd4>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	e009      	b.n	8002988 <HAL_I2C_Init+0xe8>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <HAL_I2C_Init+0x284>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	3301      	adds	r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800299a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	495c      	ldr	r1, [pc, #368]	; (8002b14 <HAL_I2C_Init+0x274>)
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d819      	bhi.n	80029dc <HAL_I2C_Init+0x13c>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e59      	subs	r1, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029bc:	400b      	ands	r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_I2C_Init+0x138>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e59      	subs	r1, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	e051      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029d8:	2304      	movs	r3, #4
 80029da:	e04f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <HAL_I2C_Init+0x168>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1e58      	subs	r0, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e012      	b.n	8002a2e <HAL_I2C_Init+0x18e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e58      	subs	r0, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	0099      	lsls	r1, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Init+0x196>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_I2C_Init+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e58      	subs	r0, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	440b      	add	r3, r1
 8002a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a50:	3301      	adds	r3, #1
 8002a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Init+0x1dc>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e58      	subs	r0, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	0099      	lsls	r1, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	6809      	ldr	r1, [r1, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6911      	ldr	r1, [r2, #16]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	003d08ff 	.word	0x003d08ff
 8002b20:	431bde83 	.word	0x431bde83
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	461a      	mov	r2, r3
 8002b34:	460b      	mov	r3, r1
 8002b36:	817b      	strh	r3, [r7, #10]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff fc3a 	bl	80023b4 <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	f040 80e0 	bne.w	8002d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2319      	movs	r3, #25
 8002b56:	2201      	movs	r2, #1
 8002b58:	4970      	ldr	r1, [pc, #448]	; (8002d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fc72 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0d3      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2C_Master_Transmit+0x50>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0cc      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d007      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2221      	movs	r2, #33	; 0x21
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	893a      	ldrh	r2, [r7, #8]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a50      	ldr	r2, [pc, #320]	; (8002d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fadc 	bl	80031a4 <I2C_MasterRequestWrite>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e08d      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c0c:	e066      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fcec 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d107      	bne.n	8002c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06b      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d11b      	bne.n	8002cb0 <HAL_I2C_Master_Transmit+0x188>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d017      	beq.n	8002cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	6a39      	ldr	r1, [r7, #32]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fcdc 	bl	8003672 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d107      	bne.n	8002cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01a      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d194      	bne.n	8002c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	00100002 	.word	0x00100002
 8002d20:	ffff0000 	.word	0xffff0000

08002d24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff fb3c 	bl	80023b4 <HAL_GetTick>
 8002d3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 820b 	bne.w	8003162 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2319      	movs	r3, #25
 8002d52:	2201      	movs	r2, #1
 8002d54:	497c      	ldr	r1, [pc, #496]	; (8002f48 <HAL_I2C_Master_Receive+0x224>)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fb74 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	e1fe      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2C_Master_Receive+0x50>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e1f7      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d007      	beq.n	8002d9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0201 	orr.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2222      	movs	r2, #34	; 0x22
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2210      	movs	r2, #16
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	893a      	ldrh	r2, [r7, #8]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a5c      	ldr	r2, [pc, #368]	; (8002f4c <HAL_I2C_Master_Receive+0x228>)
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa60 	bl	80032a8 <I2C_MasterRequestRead>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1b8      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e18c      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d11b      	bne.n	8002e62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	61fb      	str	r3, [r7, #28]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e16c      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d11b      	bne.n	8002ea2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	e14c      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ec8:	e138      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	f200 80f1 	bhi.w	80030b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d123      	bne.n	8002f24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fc07 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e139      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f22:	e10b      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d14e      	bne.n	8002fca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <HAL_I2C_Master_Receive+0x22c>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa84 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e10e      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
 8002f46:	bf00      	nop
 8002f48:	00100002 	.word	0x00100002
 8002f4c:	ffff0000 	.word	0xffff0000
 8002f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc8:	e0b8      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4966      	ldr	r1, [pc, #408]	; (800316c <HAL_I2C_Master_Receive+0x448>)
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fa35 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0bf      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2200      	movs	r2, #0
 800302e:	494f      	ldr	r1, [pc, #316]	; (800316c <HAL_I2C_Master_Receive+0x448>)
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fa07 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e091      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b4:	e042      	b.n	800313c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fb1a 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e04c      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b04      	cmp	r3, #4
 8003108:	d118      	bne.n	800313c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f aec2 	bne.w	8002eca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	00010004 	.word	0x00010004

08003170 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317e:	b2db      	uxtb	r3, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	460b      	mov	r3, r1
 80031b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d006      	beq.n	80031ce <I2C_MasterRequestWrite+0x2a>
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d003      	beq.n	80031ce <I2C_MasterRequestWrite+0x2a>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031cc:	d108      	bne.n	80031e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	e00b      	b.n	80031f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	2b12      	cmp	r3, #18
 80031e6:	d107      	bne.n	80031f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f91d 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321e:	d103      	bne.n	8003228 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e035      	b.n	8003298 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003234:	d108      	bne.n	8003248 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003244:	611a      	str	r2, [r3, #16]
 8003246:	e01b      	b.n	8003280 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003248:	897b      	ldrh	r3, [r7, #10]
 800324a:	11db      	asrs	r3, r3, #7
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0306 	and.w	r3, r3, #6
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f063 030f 	orn	r3, r3, #15
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	490e      	ldr	r1, [pc, #56]	; (80032a0 <I2C_MasterRequestWrite+0xfc>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f943 	bl	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e010      	b.n	8003298 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003276:	897b      	ldrh	r3, [r7, #10]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4907      	ldr	r1, [pc, #28]	; (80032a4 <I2C_MasterRequestWrite+0x100>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f933 	bl	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	00010008 	.word	0x00010008
 80032a4:	00010002 	.word	0x00010002

080032a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	460b      	mov	r3, r1
 80032b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d006      	beq.n	80032e2 <I2C_MasterRequestRead+0x3a>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d003      	beq.n	80032e2 <I2C_MasterRequestRead+0x3a>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e0:	d108      	bne.n	80032f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e00b      	b.n	800330c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b11      	cmp	r3, #17
 80032fa:	d107      	bne.n	800330c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f893 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003332:	d103      	bne.n	800333c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e079      	b.n	8003434 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003348:	d108      	bne.n	800335c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	e05f      	b.n	800341c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800335c:	897b      	ldrh	r3, [r7, #10]
 800335e:	11db      	asrs	r3, r3, #7
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 0306 	and.w	r3, r3, #6
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f063 030f 	orn	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4930      	ldr	r1, [pc, #192]	; (800343c <I2C_MasterRequestRead+0x194>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8b9 	bl	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e054      	b.n	8003434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4929      	ldr	r1, [pc, #164]	; (8003440 <I2C_MasterRequestRead+0x198>)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f8a9 	bl	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e044      	b.n	8003434 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f831 	bl	8003444 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d103      	bne.n	8003400 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e017      	b.n	8003434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003404:	897b      	ldrh	r3, [r7, #10]
 8003406:	11db      	asrs	r3, r3, #7
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 0306 	and.w	r3, r3, #6
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f063 030e 	orn	r3, r3, #14
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <I2C_MasterRequestRead+0x198>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f865 	bl	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	00010008 	.word	0x00010008
 8003440:	00010002 	.word	0x00010002

08003444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003454:	e025      	b.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d021      	beq.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe ffa9 	bl	80023b4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e023      	b.n	80034ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10d      	bne.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4013      	ands	r3, r2
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	e00c      	b.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d0b6      	beq.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003500:	e051      	b.n	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003510:	d123      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800352a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0204 	orr.w	r2, r3, #4
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e046      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d021      	beq.n	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe ff27 	bl	80023b4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d116      	bne.n	80035a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e020      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10c      	bne.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e00b      	b.n	80035e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	43da      	mvns	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4013      	ands	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d18d      	bne.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fc:	e02d      	b.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8ce 	bl	80037a0 <I2C_IsAcknowledgeFailed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02d      	b.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d021      	beq.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fecd 	bl	80023b4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d116      	bne.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e007      	b.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d1ca      	bne.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800367e:	e02d      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f88d 	bl	80037a0 <I2C_IsAcknowledgeFailed>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e02d      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d021      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7fe fe8c 	bl	80023b4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d1ca      	bne.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003700:	e042      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d119      	bne.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e029      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fe36 	bl	80023b4 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d1b5      	bne.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d11b      	bne.n	80037f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e264      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381e:	4ba3      	ldr	r3, [pc, #652]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00c      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382a:	4ba0      	ldr	r3, [pc, #640]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003832:	2b08      	cmp	r3, #8
 8003834:	d112      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b9d      	ldr	r3, [pc, #628]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b99      	ldr	r3, [pc, #612]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e23f      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b91      	ldr	r3, [pc, #580]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a90      	ldr	r2, [pc, #576]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b88      	ldr	r3, [pc, #544]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a87      	ldr	r2, [pc, #540]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b84      	ldr	r3, [pc, #528]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a83      	ldr	r2, [pc, #524]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a80      	ldr	r2, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fd7c 	bl	80023b4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fd78 	bl	80023b4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e204      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	4b76      	ldr	r3, [pc, #472]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fd68 	bl	80023b4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fe fd64 	bl	80023b4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e1f0      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003922:	4b62      	ldr	r3, [pc, #392]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d116      	bne.n	8003968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e1c4      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b56      	ldr	r3, [pc, #344]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4952      	ldr	r1, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	e03a      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x2b0>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe fd1d 	bl	80023b4 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397e:	f7fe fd19 	bl	80023b4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1a5      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4940      	ldr	r1, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
 80039b0:	e015      	b.n	80039de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x2b0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fe fcfc 	bl	80023b4 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039c0:	f7fe fcf8 	bl	80023b4 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e184      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4b36      	ldr	r3, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d030      	beq.n	8003a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_OscConfig+0x2b4>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fcdc 	bl	80023b4 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a00:	f7fe fcd8 	bl	80023b4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e164      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
 8003a1e:	e015      	b.n	8003a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a20:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <HAL_RCC_OscConfig+0x2b4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a26:	f7fe fcc5 	bl	80023b4 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fcc1 	bl	80023b4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e14d      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80a0 	beq.w	8003b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d121      	bne.n	8003ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_RCC_OscConfig+0x2b8>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fc87 	bl	80023b4 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	e011      	b.n	8003ace <HAL_RCC_OscConfig+0x2ce>
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	42470000 	.word	0x42470000
 8003ab4:	42470e80 	.word	0x42470e80
 8003ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fe fc7a 	bl	80023b4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e106      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_OscConfig+0x4e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_OscConfig+0x2f0>
 8003ae2:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	e01c      	b.n	8003b2a <HAL_RCC_OscConfig+0x32a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x312>
 8003af8:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003afe:	f043 0304 	orr.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a77      	ldr	r2, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	e00b      	b.n	8003b2a <HAL_RCC_OscConfig+0x32a>
 8003b12:	4b75      	ldr	r3, [pc, #468]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a74      	ldr	r2, [pc, #464]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	4b72      	ldr	r3, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a71      	ldr	r2, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d015      	beq.n	8003b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fe fc3f 	bl	80023b4 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fe fc3b 	bl	80023b4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0c5      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	4b65      	ldr	r3, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCC_OscConfig+0x33a>
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5e:	f7fe fc29 	bl	80023b4 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b64:	e00a      	b.n	8003b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b66:	f7fe fc25 	bl	80023b4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0af      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ee      	bne.n	8003b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b88:	7dfb      	ldrb	r3, [r7, #23]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a55      	ldr	r2, [pc, #340]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 809b 	beq.w	8003cda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d05c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d141      	bne.n	8003c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fbf9 	bl	80023b4 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fe fbf5 	bl	80023b4 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e081      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	019b      	lsls	r3, r3, #6
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c0e:	4b37      	ldr	r3, [pc, #220]	; (8003cec <HAL_RCC_OscConfig+0x4ec>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fbce 	bl	80023b4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fe fbca 	bl	80023b4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e056      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x41c>
 8003c3a:	e04e      	b.n	8003cda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <HAL_RCC_OscConfig+0x4ec>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fbb7 	bl	80023b4 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe fbb3 	bl	80023b4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e03f      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5c:	4b22      	ldr	r3, [pc, #136]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x44a>
 8003c68:	e037      	b.n	8003cda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e032      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d028      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d121      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d11a      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d111      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470060 	.word	0x42470060

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cc      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d90c      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1a:	4b63      	ldr	r3, [pc, #396]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b8      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	4a52      	ldr	r2, [pc, #328]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	494d      	ldr	r1, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d044      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e07f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d107      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e067      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4934      	ldr	r1, [pc, #208]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fe fae8 	bl	80023b4 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fe fae4 	bl	80023b4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e04f      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20c      	bcs.n	8003e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e032      	b.n	8003e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4916      	ldr	r1, [pc, #88]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e76:	f000 f821 	bl	8003ebc <HAL_RCC_GetSysClockFreq>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	490a      	ldr	r1, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	5ccb      	ldrb	r3, [r1, r3]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fa48 	bl	800232c <HAL_InitTick>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	08005aac 	.word	0x08005aac
 8003eb4:	20000000 	.word	0x20000000
 8003eb8:	20000004 	.word	0x20000004

08003ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6079      	str	r1, [r7, #4]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	60f9      	str	r1, [r7, #12]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ece:	2100      	movs	r1, #0
 8003ed0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed2:	4952      	ldr	r1, [pc, #328]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ed4:	6889      	ldr	r1, [r1, #8]
 8003ed6:	f001 010c 	and.w	r1, r1, #12
 8003eda:	2908      	cmp	r1, #8
 8003edc:	d00d      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x3e>
 8003ede:	2908      	cmp	r1, #8
 8003ee0:	f200 8094 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x150>
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x32>
 8003ee8:	2904      	cmp	r1, #4
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x38>
 8003eec:	e08e      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eee:	4b4c      	ldr	r3, [pc, #304]	; (8004020 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ef0:	60bb      	str	r3, [r7, #8]
       break;
 8003ef2:	e08e      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ef6:	60bb      	str	r3, [r7, #8]
      break;
 8003ef8:	e08b      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003efa:	4948      	ldr	r1, [pc, #288]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003efc:	6849      	ldr	r1, [r1, #4]
 8003efe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003f02:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f04:	4945      	ldr	r1, [pc, #276]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f06:	6849      	ldr	r1, [r1, #4]
 8003f08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d024      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4942      	ldr	r1, [pc, #264]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f12:	6849      	ldr	r1, [r1, #4]
 8003f14:	0989      	lsrs	r1, r1, #6
 8003f16:	4608      	mov	r0, r1
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f20:	f04f 0500 	mov.w	r5, #0
 8003f24:	ea00 0204 	and.w	r2, r0, r4
 8003f28:	ea01 0305 	and.w	r3, r1, r5
 8003f2c:	493d      	ldr	r1, [pc, #244]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f2e:	fb01 f003 	mul.w	r0, r1, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	fb01 f102 	mul.w	r1, r1, r2
 8003f38:	1844      	adds	r4, r0, r1
 8003f3a:	493a      	ldr	r1, [pc, #232]	; (8004024 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f3c:	fba2 0101 	umull	r0, r1, r2, r1
 8003f40:	1863      	adds	r3, r4, r1
 8003f42:	4619      	mov	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f7fc fd82 	bl	8000a54 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e04a      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	461a      	mov	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	ea02 0400 	and.w	r4, r2, r0
 8003f72:	ea03 0501 	and.w	r5, r3, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	014b      	lsls	r3, r1, #5
 8003f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f88:	0142      	lsls	r2, r0, #5
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	1b00      	subs	r0, r0, r4
 8003f90:	eb61 0105 	sbc.w	r1, r1, r5
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	018b      	lsls	r3, r1, #6
 8003f9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fa2:	0182      	lsls	r2, r0, #6
 8003fa4:	1a12      	subs	r2, r2, r0
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	00d9      	lsls	r1, r3, #3
 8003fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb8:	00d0      	lsls	r0, r2, #3
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	1912      	adds	r2, r2, r4
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	0299      	lsls	r1, r3, #10
 8003fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fd2:	0290      	lsls	r0, r2, #10
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	f7fc fd36 	bl	8000a54 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_RCC_GetSysClockFreq+0x160>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	60bb      	str	r3, [r7, #8]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <HAL_RCC_GetSysClockFreq+0x164>)
 800400e:	60bb      	str	r3, [r7, #8]
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	68bb      	ldr	r3, [r7, #8]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bdb0      	pop	{r4, r5, r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	017d7840 	.word	0x017d7840

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b03      	ldr	r3, [pc, #12]	; (800403c <HAL_RCC_GetHCLKFreq+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000000 	.word	0x20000000

08004040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004044:	f7ff fff0 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	08005abc 	.word	0x08005abc

08004068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e041      	b.n	80040fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd fed0 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 fab8 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e041      	b.n	800419c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f839 	bl	80041a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 fa69 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start+0x24>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e022      	b.n	8004222 <HAL_TIM_PWM_Start+0x6a>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d109      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x3e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e015      	b.n	8004222 <HAL_TIM_PWM_Start+0x6a>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start+0x58>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e008      	b.n	8004222 <HAL_TIM_PWM_Start+0x6a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e068      	b.n	80042fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0x82>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	e013      	b.n	8004262 <HAL_TIM_PWM_Start+0xaa>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0x92>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004248:	e00b      	b.n	8004262 <HAL_TIM_PWM_Start+0xaa>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0xa2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004258:	e003      	b.n	8004262 <HAL_TIM_PWM_Start+0xaa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2202      	movs	r2, #2
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc7c 	bl	8004b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_TIM_PWM_Start+0x14c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d107      	bne.n	800428a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_TIM_PWM_Start+0x14c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x10e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d013      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x10e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <HAL_TIM_PWM_Start+0x150>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x10e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a17      	ldr	r2, [pc, #92]	; (800430c <HAL_TIM_PWM_Start+0x154>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x10e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_TIM_PWM_Start+0x158>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x10e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a14      	ldr	r2, [pc, #80]	; (8004314 <HAL_TIM_PWM_Start+0x15c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d010      	beq.n	80042fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	e007      	b.n	80042fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e0ac      	b.n	800448c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	f200 809f 	bhi.w	8004480 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800437d 	.word	0x0800437d
 800434c:	08004481 	.word	0x08004481
 8004350:	08004481 	.word	0x08004481
 8004354:	08004481 	.word	0x08004481
 8004358:	080043bd 	.word	0x080043bd
 800435c:	08004481 	.word	0x08004481
 8004360:	08004481 	.word	0x08004481
 8004364:	08004481 	.word	0x08004481
 8004368:	080043ff 	.word	0x080043ff
 800436c:	08004481 	.word	0x08004481
 8004370:	08004481 	.word	0x08004481
 8004374:	08004481 	.word	0x08004481
 8004378:	0800443f 	.word	0x0800443f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f9ca 	bl	800471c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0208 	orr.w	r2, r2, #8
 8004396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0204 	bic.w	r2, r2, #4
 80043a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6999      	ldr	r1, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	619a      	str	r2, [r3, #24]
      break;
 80043ba:	e062      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fa10 	bl	80047e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6999      	ldr	r1, [r3, #24]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	619a      	str	r2, [r3, #24]
      break;
 80043fc:	e041      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fa5b 	bl	80048c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0208 	orr.w	r2, r2, #8
 8004418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0204 	bic.w	r2, r2, #4
 8004428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69d9      	ldr	r1, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	61da      	str	r2, [r3, #28]
      break;
 800443c:	e021      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 faa5 	bl	8004994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69d9      	ldr	r1, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	021a      	lsls	r2, r3, #8
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	61da      	str	r2, [r3, #28]
      break;
 800447e:	e000      	b.n	8004482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_TIM_ConfigClockSource+0x18>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e0b3      	b.n	8004614 <HAL_TIM_ConfigClockSource+0x180>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e4:	d03e      	beq.n	8004564 <HAL_TIM_ConfigClockSource+0xd0>
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ea:	f200 8087 	bhi.w	80045fc <HAL_TIM_ConfigClockSource+0x168>
 80044ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f2:	f000 8085 	beq.w	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fa:	d87f      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 80044fc:	2b70      	cmp	r3, #112	; 0x70
 80044fe:	d01a      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0xa2>
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d87b      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 8004504:	2b60      	cmp	r3, #96	; 0x60
 8004506:	d050      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0x116>
 8004508:	2b60      	cmp	r3, #96	; 0x60
 800450a:	d877      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 800450c:	2b50      	cmp	r3, #80	; 0x50
 800450e:	d03c      	beq.n	800458a <HAL_TIM_ConfigClockSource+0xf6>
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d873      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d058      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x136>
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d86f      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 800451c:	2b30      	cmp	r3, #48	; 0x30
 800451e:	d064      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x156>
 8004520:	2b30      	cmp	r3, #48	; 0x30
 8004522:	d86b      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 8004524:	2b20      	cmp	r3, #32
 8004526:	d060      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x156>
 8004528:	2b20      	cmp	r3, #32
 800452a:	d867      	bhi.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d05c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x156>
 8004530:	2b10      	cmp	r3, #16
 8004532:	d05a      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004534:	e062      	b.n	80045fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6899      	ldr	r1, [r3, #8]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f000 faef 	bl	8004b28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004558:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	609a      	str	r2, [r3, #8]
      break;
 8004562:	e04e      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	6899      	ldr	r1, [r3, #8]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f000 fad8 	bl	8004b28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004586:	609a      	str	r2, [r3, #8]
      break;
 8004588:	e03b      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	461a      	mov	r2, r3
 8004598:	f000 fa4c 	bl	8004a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2150      	movs	r1, #80	; 0x50
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 faa5 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80045a8:	e02b      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fa6b 	bl	8004a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2160      	movs	r1, #96	; 0x60
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fa95 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80045c8:	e01b      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f000 fa2c 	bl	8004a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2140      	movs	r1, #64	; 0x40
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fa85 	bl	8004af2 <TIM_ITRx_SetConfig>
      break;
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4619      	mov	r1, r3
 80045f4:	4610      	mov	r0, r2
 80045f6:	f000 fa7c 	bl	8004af2 <TIM_ITRx_SetConfig>
        break;
 80045fa:	e002      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045fc:	bf00      	nop
 80045fe:	e000      	b.n	8004602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a34      	ldr	r2, [pc, #208]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a31      	ldr	r2, [pc, #196]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a30      	ldr	r2, [pc, #192]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_Base_SetConfig+0xf0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a22      	ldr	r2, [pc, #136]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <TIM_Base_SetConfig+0xf0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <TIM_Base_SetConfig+0xf4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <TIM_Base_SetConfig+0xf8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <TIM_Base_SetConfig+0xfc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0302 	bic.w	r3, r3, #2
 8004764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <TIM_OC1_SetConfig+0xc8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0308 	bic.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <TIM_OC1_SetConfig+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	621a      	str	r2, [r3, #32]
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010000 	.word	0x40010000

080047e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <TIM_OC2_SetConfig+0xd4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10d      	bne.n	8004864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a15      	ldr	r2, [pc, #84]	; (80048bc <TIM_OC2_SetConfig+0xd4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d113      	bne.n	8004894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	621a      	str	r2, [r3, #32]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000

080048c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10d      	bne.n	800493a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <TIM_OC3_SetConfig+0xd0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40010000 	.word	0x40010000

08004994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <TIM_OC4_SetConfig+0x9c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d109      	bne.n	8004a08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	019b      	lsls	r3, r3, #6
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000

08004a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 030a 	bic.w	r3, r3, #10
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0210 	bic.w	r2, r3, #16
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f043 0307 	orr.w	r3, r3, #7
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1a      	ldr	r2, [r3, #32]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e050      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d013      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40014000 	.word	0x40014000

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 fce6 	bl	8005680 <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08005b30 	.word	0x08005b30
 8004cd8:	08005b30 	.word	0x08005b30
 8004cdc:	08005b30 	.word	0x08005b30
 8004ce0:	08005b34 	.word	0x08005b34

08004ce4 <memset>:
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <_puts_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	460e      	mov	r6, r1
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <_puts_r+0x10>
 8004cfc:	6983      	ldr	r3, [r0, #24]
 8004cfe:	b90b      	cbnz	r3, 8004d04 <_puts_r+0x10>
 8004d00:	f000 fa48 	bl	8005194 <__sinit>
 8004d04:	69ab      	ldr	r3, [r5, #24]
 8004d06:	68ac      	ldr	r4, [r5, #8]
 8004d08:	b913      	cbnz	r3, 8004d10 <_puts_r+0x1c>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fa42 	bl	8005194 <__sinit>
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <_puts_r+0xd0>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d120      	bne.n	8004d58 <_puts_r+0x64>
 8004d16:	686c      	ldr	r4, [r5, #4]
 8004d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1a:	07db      	lsls	r3, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_puts_r+0x36>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	0598      	lsls	r0, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_puts_r+0x36>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f000 fad3 	bl	80052d0 <__retarget_lock_acquire_recursive>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	0719      	lsls	r1, r3, #28
 8004d2e:	d51d      	bpl.n	8004d6c <_puts_r+0x78>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	b1db      	cbz	r3, 8004d6c <_puts_r+0x78>
 8004d34:	3e01      	subs	r6, #1
 8004d36:	68a3      	ldr	r3, [r4, #8]
 8004d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	60a3      	str	r3, [r4, #8]
 8004d40:	bb39      	cbnz	r1, 8004d92 <_puts_r+0x9e>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da38      	bge.n	8004db8 <_puts_r+0xc4>
 8004d46:	4622      	mov	r2, r4
 8004d48:	210a      	movs	r1, #10
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 f848 	bl	8004de0 <__swbuf_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d011      	beq.n	8004d78 <_puts_r+0x84>
 8004d54:	250a      	movs	r5, #10
 8004d56:	e011      	b.n	8004d7c <_puts_r+0x88>
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <_puts_r+0xd4>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d101      	bne.n	8004d62 <_puts_r+0x6e>
 8004d5e:	68ac      	ldr	r4, [r5, #8]
 8004d60:	e7da      	b.n	8004d18 <_puts_r+0x24>
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <_puts_r+0xd8>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	bf08      	it	eq
 8004d68:	68ec      	ldreq	r4, [r5, #12]
 8004d6a:	e7d5      	b.n	8004d18 <_puts_r+0x24>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f888 	bl	8004e84 <__swsetup_r>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d0dd      	beq.n	8004d34 <_puts_r+0x40>
 8004d78:	f04f 35ff 	mov.w	r5, #4294967295
 8004d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7e:	07da      	lsls	r2, r3, #31
 8004d80:	d405      	bmi.n	8004d8e <_puts_r+0x9a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d402      	bmi.n	8004d8e <_puts_r+0x9a>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f000 faa2 	bl	80052d2 <__retarget_lock_release_recursive>
 8004d8e:	4628      	mov	r0, r5
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da04      	bge.n	8004da0 <_puts_r+0xac>
 8004d96:	69a2      	ldr	r2, [r4, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	dc06      	bgt.n	8004daa <_puts_r+0xb6>
 8004d9c:	290a      	cmp	r1, #10
 8004d9e:	d004      	beq.n	8004daa <_puts_r+0xb6>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	6022      	str	r2, [r4, #0]
 8004da6:	7019      	strb	r1, [r3, #0]
 8004da8:	e7c5      	b.n	8004d36 <_puts_r+0x42>
 8004daa:	4622      	mov	r2, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 f817 	bl	8004de0 <__swbuf_r>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1bf      	bne.n	8004d36 <_puts_r+0x42>
 8004db6:	e7df      	b.n	8004d78 <_puts_r+0x84>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	250a      	movs	r5, #10
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6022      	str	r2, [r4, #0]
 8004dc0:	701d      	strb	r5, [r3, #0]
 8004dc2:	e7db      	b.n	8004d7c <_puts_r+0x88>
 8004dc4:	08005ae8 	.word	0x08005ae8
 8004dc8:	08005b08 	.word	0x08005b08
 8004dcc:	08005ac8 	.word	0x08005ac8

08004dd0 <puts>:
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <puts+0xc>)
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f7ff bf8d 	b.w	8004cf4 <_puts_r>
 8004dda:	bf00      	nop
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <__swbuf_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	460e      	mov	r6, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	4605      	mov	r5, r0
 8004de8:	b118      	cbz	r0, 8004df2 <__swbuf_r+0x12>
 8004dea:	6983      	ldr	r3, [r0, #24]
 8004dec:	b90b      	cbnz	r3, 8004df2 <__swbuf_r+0x12>
 8004dee:	f000 f9d1 	bl	8005194 <__sinit>
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <__swbuf_r+0x98>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d12b      	bne.n	8004e50 <__swbuf_r+0x70>
 8004df8:	686c      	ldr	r4, [r5, #4]
 8004dfa:	69a3      	ldr	r3, [r4, #24]
 8004dfc:	60a3      	str	r3, [r4, #8]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	071a      	lsls	r2, r3, #28
 8004e02:	d52f      	bpl.n	8004e64 <__swbuf_r+0x84>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	b36b      	cbz	r3, 8004e64 <__swbuf_r+0x84>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	1ac0      	subs	r0, r0, r3
 8004e0e:	6963      	ldr	r3, [r4, #20]
 8004e10:	b2f6      	uxtb	r6, r6
 8004e12:	4283      	cmp	r3, r0
 8004e14:	4637      	mov	r7, r6
 8004e16:	dc04      	bgt.n	8004e22 <__swbuf_r+0x42>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 f926 	bl	800506c <_fflush_r>
 8004e20:	bb30      	cbnz	r0, 8004e70 <__swbuf_r+0x90>
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	701e      	strb	r6, [r3, #0]
 8004e30:	6963      	ldr	r3, [r4, #20]
 8004e32:	3001      	adds	r0, #1
 8004e34:	4283      	cmp	r3, r0
 8004e36:	d004      	beq.n	8004e42 <__swbuf_r+0x62>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d506      	bpl.n	8004e4c <__swbuf_r+0x6c>
 8004e3e:	2e0a      	cmp	r6, #10
 8004e40:	d104      	bne.n	8004e4c <__swbuf_r+0x6c>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 f911 	bl	800506c <_fflush_r>
 8004e4a:	b988      	cbnz	r0, 8004e70 <__swbuf_r+0x90>
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <__swbuf_r+0x9c>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d101      	bne.n	8004e5a <__swbuf_r+0x7a>
 8004e56:	68ac      	ldr	r4, [r5, #8]
 8004e58:	e7cf      	b.n	8004dfa <__swbuf_r+0x1a>
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <__swbuf_r+0xa0>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf08      	it	eq
 8004e60:	68ec      	ldreq	r4, [r5, #12]
 8004e62:	e7ca      	b.n	8004dfa <__swbuf_r+0x1a>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f80c 	bl	8004e84 <__swsetup_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d0cb      	beq.n	8004e08 <__swbuf_r+0x28>
 8004e70:	f04f 37ff 	mov.w	r7, #4294967295
 8004e74:	e7ea      	b.n	8004e4c <__swbuf_r+0x6c>
 8004e76:	bf00      	nop
 8004e78:	08005ae8 	.word	0x08005ae8
 8004e7c:	08005b08 	.word	0x08005b08
 8004e80:	08005ac8 	.word	0x08005ac8

08004e84 <__swsetup_r>:
 8004e84:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <__swsetup_r+0xcc>)
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	b125      	cbz	r5, 8004e9a <__swsetup_r+0x16>
 8004e90:	69ab      	ldr	r3, [r5, #24]
 8004e92:	b913      	cbnz	r3, 8004e9a <__swsetup_r+0x16>
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f97d 	bl	8005194 <__sinit>
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <__swsetup_r+0xd0>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	d10f      	bne.n	8004ec0 <__swsetup_r+0x3c>
 8004ea0:	686c      	ldr	r4, [r5, #4]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea8:	0719      	lsls	r1, r3, #28
 8004eaa:	d42c      	bmi.n	8004f06 <__swsetup_r+0x82>
 8004eac:	06dd      	lsls	r5, r3, #27
 8004eae:	d411      	bmi.n	8004ed4 <__swsetup_r+0x50>
 8004eb0:	2309      	movs	r3, #9
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e03e      	b.n	8004f3e <__swsetup_r+0xba>
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <__swsetup_r+0xd4>)
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d101      	bne.n	8004eca <__swsetup_r+0x46>
 8004ec6:	68ac      	ldr	r4, [r5, #8]
 8004ec8:	e7eb      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <__swsetup_r+0xd8>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	bf08      	it	eq
 8004ed0:	68ec      	ldreq	r4, [r5, #12]
 8004ed2:	e7e6      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004ed4:	0758      	lsls	r0, r3, #29
 8004ed6:	d512      	bpl.n	8004efe <__swsetup_r+0x7a>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	b141      	cbz	r1, 8004eee <__swsetup_r+0x6a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__swsetup_r+0x66>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 fa59 	bl	800539c <_free_r>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6363      	str	r3, [r4, #52]	; 0x34
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	b94b      	cbnz	r3, 8004f1e <__swsetup_r+0x9a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d003      	beq.n	8004f1e <__swsetup_r+0x9a>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f9ff 	bl	800531c <__smakebuf_r>
 8004f1e:	89a0      	ldrh	r0, [r4, #12]
 8004f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f24:	f010 0301 	ands.w	r3, r0, #1
 8004f28:	d00a      	beq.n	8004f40 <__swsetup_r+0xbc>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6963      	ldr	r3, [r4, #20]
 8004f30:	425b      	negs	r3, r3
 8004f32:	61a3      	str	r3, [r4, #24]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b943      	cbnz	r3, 8004f4a <__swsetup_r+0xc6>
 8004f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f3c:	d1ba      	bne.n	8004eb4 <__swsetup_r+0x30>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	0781      	lsls	r1, r0, #30
 8004f42:	bf58      	it	pl
 8004f44:	6963      	ldrpl	r3, [r4, #20]
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	e7f4      	b.n	8004f34 <__swsetup_r+0xb0>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e7f7      	b.n	8004f3e <__swsetup_r+0xba>
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	08005ae8 	.word	0x08005ae8
 8004f58:	08005b08 	.word	0x08005b08
 8004f5c:	08005ac8 	.word	0x08005ac8

08004f60 <__sflush_r>:
 8004f60:	898a      	ldrh	r2, [r1, #12]
 8004f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f66:	4605      	mov	r5, r0
 8004f68:	0710      	lsls	r0, r2, #28
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	d458      	bmi.n	8005020 <__sflush_r+0xc0>
 8004f6e:	684b      	ldr	r3, [r1, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc05      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dc02      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d0f9      	beq.n	8004f7a <__sflush_r+0x1a>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f8c:	682f      	ldr	r7, [r5, #0]
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	d032      	beq.n	8004ff8 <__sflush_r+0x98>
 8004f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	075a      	lsls	r2, r3, #29
 8004f98:	d505      	bpl.n	8004fa6 <__sflush_r+0x46>
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	1ac0      	subs	r0, r0, r3
 8004f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa0:	b10b      	cbz	r3, 8004fa6 <__sflush_r+0x46>
 8004fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fa4:	1ac0      	subs	r0, r0, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b0      	blx	r6
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	d106      	bne.n	8004fc6 <__sflush_r+0x66>
 8004fb8:	6829      	ldr	r1, [r5, #0]
 8004fba:	291d      	cmp	r1, #29
 8004fbc:	d82c      	bhi.n	8005018 <__sflush_r+0xb8>
 8004fbe:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <__sflush_r+0x108>)
 8004fc0:	40ca      	lsrs	r2, r1
 8004fc2:	07d6      	lsls	r6, r2, #31
 8004fc4:	d528      	bpl.n	8005018 <__sflush_r+0xb8>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6062      	str	r2, [r4, #4]
 8004fca:	04d9      	lsls	r1, r3, #19
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	d504      	bpl.n	8004fdc <__sflush_r+0x7c>
 8004fd2:	1c42      	adds	r2, r0, #1
 8004fd4:	d101      	bne.n	8004fda <__sflush_r+0x7a>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	b903      	cbnz	r3, 8004fdc <__sflush_r+0x7c>
 8004fda:	6560      	str	r0, [r4, #84]	; 0x54
 8004fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fde:	602f      	str	r7, [r5, #0]
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	d0ca      	beq.n	8004f7a <__sflush_r+0x1a>
 8004fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	d002      	beq.n	8004ff2 <__sflush_r+0x92>
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f9d5 	bl	800539c <_free_r>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ff6:	e7c1      	b.n	8004f7c <__sflush_r+0x1c>
 8004ff8:	6a21      	ldr	r1, [r4, #32]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	1c41      	adds	r1, r0, #1
 8005002:	d1c7      	bne.n	8004f94 <__sflush_r+0x34>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0c4      	beq.n	8004f94 <__sflush_r+0x34>
 800500a:	2b1d      	cmp	r3, #29
 800500c:	d001      	beq.n	8005012 <__sflush_r+0xb2>
 800500e:	2b16      	cmp	r3, #22
 8005010:	d101      	bne.n	8005016 <__sflush_r+0xb6>
 8005012:	602f      	str	r7, [r5, #0]
 8005014:	e7b1      	b.n	8004f7a <__sflush_r+0x1a>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	e7ad      	b.n	8004f7c <__sflush_r+0x1c>
 8005020:	690f      	ldr	r7, [r1, #16]
 8005022:	2f00      	cmp	r7, #0
 8005024:	d0a9      	beq.n	8004f7a <__sflush_r+0x1a>
 8005026:	0793      	lsls	r3, r2, #30
 8005028:	680e      	ldr	r6, [r1, #0]
 800502a:	bf08      	it	eq
 800502c:	694b      	ldreq	r3, [r1, #20]
 800502e:	600f      	str	r7, [r1, #0]
 8005030:	bf18      	it	ne
 8005032:	2300      	movne	r3, #0
 8005034:	eba6 0807 	sub.w	r8, r6, r7
 8005038:	608b      	str	r3, [r1, #8]
 800503a:	f1b8 0f00 	cmp.w	r8, #0
 800503e:	dd9c      	ble.n	8004f7a <__sflush_r+0x1a>
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005044:	4643      	mov	r3, r8
 8005046:	463a      	mov	r2, r7
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	2800      	cmp	r0, #0
 800504e:	dc06      	bgt.n	800505e <__sflush_r+0xfe>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	e78e      	b.n	8004f7c <__sflush_r+0x1c>
 800505e:	4407      	add	r7, r0
 8005060:	eba8 0800 	sub.w	r8, r8, r0
 8005064:	e7e9      	b.n	800503a <__sflush_r+0xda>
 8005066:	bf00      	nop
 8005068:	20400001 	.word	0x20400001

0800506c <_fflush_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	4605      	mov	r5, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b913      	cbnz	r3, 800507c <_fflush_r+0x10>
 8005076:	2500      	movs	r5, #0
 8005078:	4628      	mov	r0, r5
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	b118      	cbz	r0, 8005086 <_fflush_r+0x1a>
 800507e:	6983      	ldr	r3, [r0, #24]
 8005080:	b90b      	cbnz	r3, 8005086 <_fflush_r+0x1a>
 8005082:	f000 f887 	bl	8005194 <__sinit>
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <_fflush_r+0x6c>)
 8005088:	429c      	cmp	r4, r3
 800508a:	d11b      	bne.n	80050c4 <_fflush_r+0x58>
 800508c:	686c      	ldr	r4, [r5, #4]
 800508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ef      	beq.n	8005076 <_fflush_r+0xa>
 8005096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005098:	07d0      	lsls	r0, r2, #31
 800509a:	d404      	bmi.n	80050a6 <_fflush_r+0x3a>
 800509c:	0599      	lsls	r1, r3, #22
 800509e:	d402      	bmi.n	80050a6 <_fflush_r+0x3a>
 80050a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050a2:	f000 f915 	bl	80052d0 <__retarget_lock_acquire_recursive>
 80050a6:	4628      	mov	r0, r5
 80050a8:	4621      	mov	r1, r4
 80050aa:	f7ff ff59 	bl	8004f60 <__sflush_r>
 80050ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b0:	07da      	lsls	r2, r3, #31
 80050b2:	4605      	mov	r5, r0
 80050b4:	d4e0      	bmi.n	8005078 <_fflush_r+0xc>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	059b      	lsls	r3, r3, #22
 80050ba:	d4dd      	bmi.n	8005078 <_fflush_r+0xc>
 80050bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050be:	f000 f908 	bl	80052d2 <__retarget_lock_release_recursive>
 80050c2:	e7d9      	b.n	8005078 <_fflush_r+0xc>
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <_fflush_r+0x70>)
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d101      	bne.n	80050ce <_fflush_r+0x62>
 80050ca:	68ac      	ldr	r4, [r5, #8]
 80050cc:	e7df      	b.n	800508e <_fflush_r+0x22>
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <_fflush_r+0x74>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	bf08      	it	eq
 80050d4:	68ec      	ldreq	r4, [r5, #12]
 80050d6:	e7da      	b.n	800508e <_fflush_r+0x22>
 80050d8:	08005ae8 	.word	0x08005ae8
 80050dc:	08005b08 	.word	0x08005b08
 80050e0:	08005ac8 	.word	0x08005ac8

080050e4 <std>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b510      	push	{r4, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	e9c0 3300 	strd	r3, r3, [r0]
 80050ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f2:	6083      	str	r3, [r0, #8]
 80050f4:	8181      	strh	r1, [r0, #12]
 80050f6:	6643      	str	r3, [r0, #100]	; 0x64
 80050f8:	81c2      	strh	r2, [r0, #14]
 80050fa:	6183      	str	r3, [r0, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	2208      	movs	r2, #8
 8005100:	305c      	adds	r0, #92	; 0x5c
 8005102:	f7ff fdef 	bl	8004ce4 <memset>
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <std+0x38>)
 8005108:	6263      	str	r3, [r4, #36]	; 0x24
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x3c>)
 800510c:	62a3      	str	r3, [r4, #40]	; 0x28
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <std+0x40>)
 8005110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x44>)
 8005114:	6224      	str	r4, [r4, #32]
 8005116:	6323      	str	r3, [r4, #48]	; 0x30
 8005118:	bd10      	pop	{r4, pc}
 800511a:	bf00      	nop
 800511c:	08005511 	.word	0x08005511
 8005120:	08005533 	.word	0x08005533
 8005124:	0800556b 	.word	0x0800556b
 8005128:	0800558f 	.word	0x0800558f

0800512c <_cleanup_r>:
 800512c:	4901      	ldr	r1, [pc, #4]	; (8005134 <_cleanup_r+0x8>)
 800512e:	f000 b8af 	b.w	8005290 <_fwalk_reent>
 8005132:	bf00      	nop
 8005134:	0800506d 	.word	0x0800506d

08005138 <__sfmoreglue>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	1e4a      	subs	r2, r1, #1
 800513c:	2568      	movs	r5, #104	; 0x68
 800513e:	4355      	muls	r5, r2
 8005140:	460e      	mov	r6, r1
 8005142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005146:	f000 f979 	bl	800543c <_malloc_r>
 800514a:	4604      	mov	r4, r0
 800514c:	b140      	cbz	r0, 8005160 <__sfmoreglue+0x28>
 800514e:	2100      	movs	r1, #0
 8005150:	e9c0 1600 	strd	r1, r6, [r0]
 8005154:	300c      	adds	r0, #12
 8005156:	60a0      	str	r0, [r4, #8]
 8005158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800515c:	f7ff fdc2 	bl	8004ce4 <memset>
 8005160:	4620      	mov	r0, r4
 8005162:	bd70      	pop	{r4, r5, r6, pc}

08005164 <__sfp_lock_acquire>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__sfp_lock_acquire+0x8>)
 8005166:	f000 b8b3 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	200002e0 	.word	0x200002e0

08005170 <__sfp_lock_release>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_release+0x8>)
 8005172:	f000 b8ae 	b.w	80052d2 <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	200002e0 	.word	0x200002e0

0800517c <__sinit_lock_acquire>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sinit_lock_acquire+0x8>)
 800517e:	f000 b8a7 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 8005182:	bf00      	nop
 8005184:	200002db 	.word	0x200002db

08005188 <__sinit_lock_release>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sinit_lock_release+0x8>)
 800518a:	f000 b8a2 	b.w	80052d2 <__retarget_lock_release_recursive>
 800518e:	bf00      	nop
 8005190:	200002db 	.word	0x200002db

08005194 <__sinit>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4604      	mov	r4, r0
 8005198:	f7ff fff0 	bl	800517c <__sinit_lock_acquire>
 800519c:	69a3      	ldr	r3, [r4, #24]
 800519e:	b11b      	cbz	r3, 80051a8 <__sinit+0x14>
 80051a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a4:	f7ff bff0 	b.w	8005188 <__sinit_lock_release>
 80051a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051ac:	6523      	str	r3, [r4, #80]	; 0x50
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <__sinit+0x68>)
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <__sinit+0x6c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	bf04      	itt	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	61a3      	streq	r3, [r4, #24]
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f820 	bl	8005204 <__sfp>
 80051c4:	6060      	str	r0, [r4, #4]
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 f81c 	bl	8005204 <__sfp>
 80051cc:	60a0      	str	r0, [r4, #8]
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f818 	bl	8005204 <__sfp>
 80051d4:	2200      	movs	r2, #0
 80051d6:	60e0      	str	r0, [r4, #12]
 80051d8:	2104      	movs	r1, #4
 80051da:	6860      	ldr	r0, [r4, #4]
 80051dc:	f7ff ff82 	bl	80050e4 <std>
 80051e0:	68a0      	ldr	r0, [r4, #8]
 80051e2:	2201      	movs	r2, #1
 80051e4:	2109      	movs	r1, #9
 80051e6:	f7ff ff7d 	bl	80050e4 <std>
 80051ea:	68e0      	ldr	r0, [r4, #12]
 80051ec:	2202      	movs	r2, #2
 80051ee:	2112      	movs	r1, #18
 80051f0:	f7ff ff78 	bl	80050e4 <std>
 80051f4:	2301      	movs	r3, #1
 80051f6:	61a3      	str	r3, [r4, #24]
 80051f8:	e7d2      	b.n	80051a0 <__sinit+0xc>
 80051fa:	bf00      	nop
 80051fc:	08005ac4 	.word	0x08005ac4
 8005200:	0800512d 	.word	0x0800512d

08005204 <__sfp>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	4607      	mov	r7, r0
 8005208:	f7ff ffac 	bl	8005164 <__sfp_lock_acquire>
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <__sfp+0x84>)
 800520e:	681e      	ldr	r6, [r3, #0]
 8005210:	69b3      	ldr	r3, [r6, #24]
 8005212:	b913      	cbnz	r3, 800521a <__sfp+0x16>
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff ffbd 	bl	8005194 <__sinit>
 800521a:	3648      	adds	r6, #72	; 0x48
 800521c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005220:	3b01      	subs	r3, #1
 8005222:	d503      	bpl.n	800522c <__sfp+0x28>
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	b30b      	cbz	r3, 800526c <__sfp+0x68>
 8005228:	6836      	ldr	r6, [r6, #0]
 800522a:	e7f7      	b.n	800521c <__sfp+0x18>
 800522c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005230:	b9d5      	cbnz	r5, 8005268 <__sfp+0x64>
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <__sfp+0x88>)
 8005234:	60e3      	str	r3, [r4, #12]
 8005236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523a:	6665      	str	r5, [r4, #100]	; 0x64
 800523c:	f000 f847 	bl	80052ce <__retarget_lock_init_recursive>
 8005240:	f7ff ff96 	bl	8005170 <__sfp_lock_release>
 8005244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	61a5      	str	r5, [r4, #24]
 8005250:	2208      	movs	r2, #8
 8005252:	4629      	mov	r1, r5
 8005254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005258:	f7ff fd44 	bl	8004ce4 <memset>
 800525c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005264:	4620      	mov	r0, r4
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005268:	3468      	adds	r4, #104	; 0x68
 800526a:	e7d9      	b.n	8005220 <__sfp+0x1c>
 800526c:	2104      	movs	r1, #4
 800526e:	4638      	mov	r0, r7
 8005270:	f7ff ff62 	bl	8005138 <__sfmoreglue>
 8005274:	4604      	mov	r4, r0
 8005276:	6030      	str	r0, [r6, #0]
 8005278:	2800      	cmp	r0, #0
 800527a:	d1d5      	bne.n	8005228 <__sfp+0x24>
 800527c:	f7ff ff78 	bl	8005170 <__sfp_lock_release>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	e7ee      	b.n	8005264 <__sfp+0x60>
 8005286:	bf00      	nop
 8005288:	08005ac4 	.word	0x08005ac4
 800528c:	ffff0001 	.word	0xffff0001

08005290 <_fwalk_reent>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	4606      	mov	r6, r0
 8005296:	4688      	mov	r8, r1
 8005298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800529c:	2700      	movs	r7, #0
 800529e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a2:	f1b9 0901 	subs.w	r9, r9, #1
 80052a6:	d505      	bpl.n	80052b4 <_fwalk_reent+0x24>
 80052a8:	6824      	ldr	r4, [r4, #0]
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d1f7      	bne.n	800529e <_fwalk_reent+0xe>
 80052ae:	4638      	mov	r0, r7
 80052b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b4:	89ab      	ldrh	r3, [r5, #12]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d907      	bls.n	80052ca <_fwalk_reent+0x3a>
 80052ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052be:	3301      	adds	r3, #1
 80052c0:	d003      	beq.n	80052ca <_fwalk_reent+0x3a>
 80052c2:	4629      	mov	r1, r5
 80052c4:	4630      	mov	r0, r6
 80052c6:	47c0      	blx	r8
 80052c8:	4307      	orrs	r7, r0
 80052ca:	3568      	adds	r5, #104	; 0x68
 80052cc:	e7e9      	b.n	80052a2 <_fwalk_reent+0x12>

080052ce <__retarget_lock_init_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <__retarget_lock_acquire_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_release_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__swhatbuf_r>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	460e      	mov	r6, r1
 80052d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052dc:	2900      	cmp	r1, #0
 80052de:	b096      	sub	sp, #88	; 0x58
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	da07      	bge.n	80052f6 <__swhatbuf_r+0x22>
 80052e6:	2300      	movs	r3, #0
 80052e8:	602b      	str	r3, [r5, #0]
 80052ea:	89b3      	ldrh	r3, [r6, #12]
 80052ec:	061a      	lsls	r2, r3, #24
 80052ee:	d410      	bmi.n	8005312 <__swhatbuf_r+0x3e>
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	e00e      	b.n	8005314 <__swhatbuf_r+0x40>
 80052f6:	466a      	mov	r2, sp
 80052f8:	f000 f970 	bl	80055dc <_fstat_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	dbf2      	blt.n	80052e6 <__swhatbuf_r+0x12>
 8005300:	9a01      	ldr	r2, [sp, #4]
 8005302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800530a:	425a      	negs	r2, r3
 800530c:	415a      	adcs	r2, r3
 800530e:	602a      	str	r2, [r5, #0]
 8005310:	e7ee      	b.n	80052f0 <__swhatbuf_r+0x1c>
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	2000      	movs	r0, #0
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	b016      	add	sp, #88	; 0x58
 800531a:	bd70      	pop	{r4, r5, r6, pc}

0800531c <__smakebuf_r>:
 800531c:	898b      	ldrh	r3, [r1, #12]
 800531e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005320:	079d      	lsls	r5, r3, #30
 8005322:	4606      	mov	r6, r0
 8005324:	460c      	mov	r4, r1
 8005326:	d507      	bpl.n	8005338 <__smakebuf_r+0x1c>
 8005328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	2301      	movs	r3, #1
 8005332:	6163      	str	r3, [r4, #20]
 8005334:	b002      	add	sp, #8
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	ab01      	add	r3, sp, #4
 800533a:	466a      	mov	r2, sp
 800533c:	f7ff ffca 	bl	80052d4 <__swhatbuf_r>
 8005340:	9900      	ldr	r1, [sp, #0]
 8005342:	4605      	mov	r5, r0
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f879 	bl	800543c <_malloc_r>
 800534a:	b948      	cbnz	r0, 8005360 <__smakebuf_r+0x44>
 800534c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005350:	059a      	lsls	r2, r3, #22
 8005352:	d4ef      	bmi.n	8005334 <__smakebuf_r+0x18>
 8005354:	f023 0303 	bic.w	r3, r3, #3
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	e7e3      	b.n	8005328 <__smakebuf_r+0xc>
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <__smakebuf_r+0x7c>)
 8005362:	62b3      	str	r3, [r6, #40]	; 0x28
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	6163      	str	r3, [r4, #20]
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	6120      	str	r0, [r4, #16]
 8005376:	b15b      	cbz	r3, 8005390 <__smakebuf_r+0x74>
 8005378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537c:	4630      	mov	r0, r6
 800537e:	f000 f93f 	bl	8005600 <_isatty_r>
 8005382:	b128      	cbz	r0, 8005390 <__smakebuf_r+0x74>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	89a0      	ldrh	r0, [r4, #12]
 8005392:	4305      	orrs	r5, r0
 8005394:	81a5      	strh	r5, [r4, #12]
 8005396:	e7cd      	b.n	8005334 <__smakebuf_r+0x18>
 8005398:	0800512d 	.word	0x0800512d

0800539c <_free_r>:
 800539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800539e:	2900      	cmp	r1, #0
 80053a0:	d048      	beq.n	8005434 <_free_r+0x98>
 80053a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a6:	9001      	str	r0, [sp, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f1a1 0404 	sub.w	r4, r1, #4
 80053ae:	bfb8      	it	lt
 80053b0:	18e4      	addlt	r4, r4, r3
 80053b2:	f000 f947 	bl	8005644 <__malloc_lock>
 80053b6:	4a20      	ldr	r2, [pc, #128]	; (8005438 <_free_r+0x9c>)
 80053b8:	9801      	ldr	r0, [sp, #4]
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	4615      	mov	r5, r2
 80053be:	b933      	cbnz	r3, 80053ce <_free_r+0x32>
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	6014      	str	r4, [r2, #0]
 80053c4:	b003      	add	sp, #12
 80053c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ca:	f000 b941 	b.w	8005650 <__malloc_unlock>
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	d90b      	bls.n	80053ea <_free_r+0x4e>
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	1862      	adds	r2, r4, r1
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bf04      	itt	eq
 80053da:	681a      	ldreq	r2, [r3, #0]
 80053dc:	685b      	ldreq	r3, [r3, #4]
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	bf04      	itt	eq
 80053e2:	1852      	addeq	r2, r2, r1
 80053e4:	6022      	streq	r2, [r4, #0]
 80053e6:	602c      	str	r4, [r5, #0]
 80053e8:	e7ec      	b.n	80053c4 <_free_r+0x28>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x58>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x4e>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1855      	adds	r5, r2, r1
 80053f8:	42a5      	cmp	r5, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x78>
 80053fc:	6824      	ldr	r4, [r4, #0]
 80053fe:	4421      	add	r1, r4
 8005400:	1854      	adds	r4, r2, r1
 8005402:	42a3      	cmp	r3, r4
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1dd      	bne.n	80053c4 <_free_r+0x28>
 8005408:	681c      	ldr	r4, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4421      	add	r1, r4
 8005410:	6011      	str	r1, [r2, #0]
 8005412:	e7d7      	b.n	80053c4 <_free_r+0x28>
 8005414:	d902      	bls.n	800541c <_free_r+0x80>
 8005416:	230c      	movs	r3, #12
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	e7d3      	b.n	80053c4 <_free_r+0x28>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7c7      	b.n	80053c4 <_free_r+0x28>
 8005434:	b003      	add	sp, #12
 8005436:	bd30      	pop	{r4, r5, pc}
 8005438:	20000090 	.word	0x20000090

0800543c <_malloc_r>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	1ccd      	adds	r5, r1, #3
 8005440:	f025 0503 	bic.w	r5, r5, #3
 8005444:	3508      	adds	r5, #8
 8005446:	2d0c      	cmp	r5, #12
 8005448:	bf38      	it	cc
 800544a:	250c      	movcc	r5, #12
 800544c:	2d00      	cmp	r5, #0
 800544e:	4606      	mov	r6, r0
 8005450:	db01      	blt.n	8005456 <_malloc_r+0x1a>
 8005452:	42a9      	cmp	r1, r5
 8005454:	d903      	bls.n	800545e <_malloc_r+0x22>
 8005456:	230c      	movs	r3, #12
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	2000      	movs	r0, #0
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545e:	f000 f8f1 	bl	8005644 <__malloc_lock>
 8005462:	4921      	ldr	r1, [pc, #132]	; (80054e8 <_malloc_r+0xac>)
 8005464:	680a      	ldr	r2, [r1, #0]
 8005466:	4614      	mov	r4, r2
 8005468:	b99c      	cbnz	r4, 8005492 <_malloc_r+0x56>
 800546a:	4f20      	ldr	r7, [pc, #128]	; (80054ec <_malloc_r+0xb0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b923      	cbnz	r3, 800547a <_malloc_r+0x3e>
 8005470:	4621      	mov	r1, r4
 8005472:	4630      	mov	r0, r6
 8005474:	f000 f83c 	bl	80054f0 <_sbrk_r>
 8005478:	6038      	str	r0, [r7, #0]
 800547a:	4629      	mov	r1, r5
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f837 	bl	80054f0 <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d123      	bne.n	80054ce <_malloc_r+0x92>
 8005486:	230c      	movs	r3, #12
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f8e0 	bl	8005650 <__malloc_unlock>
 8005490:	e7e3      	b.n	800545a <_malloc_r+0x1e>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	1b5b      	subs	r3, r3, r5
 8005496:	d417      	bmi.n	80054c8 <_malloc_r+0x8c>
 8005498:	2b0b      	cmp	r3, #11
 800549a:	d903      	bls.n	80054a4 <_malloc_r+0x68>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	441c      	add	r4, r3
 80054a0:	6025      	str	r5, [r4, #0]
 80054a2:	e004      	b.n	80054ae <_malloc_r+0x72>
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	42a2      	cmp	r2, r4
 80054a8:	bf0c      	ite	eq
 80054aa:	600b      	streq	r3, [r1, #0]
 80054ac:	6053      	strne	r3, [r2, #4]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f8ce 	bl	8005650 <__malloc_unlock>
 80054b4:	f104 000b 	add.w	r0, r4, #11
 80054b8:	1d23      	adds	r3, r4, #4
 80054ba:	f020 0007 	bic.w	r0, r0, #7
 80054be:	1ac2      	subs	r2, r0, r3
 80054c0:	d0cc      	beq.n	800545c <_malloc_r+0x20>
 80054c2:	1a1b      	subs	r3, r3, r0
 80054c4:	50a3      	str	r3, [r4, r2]
 80054c6:	e7c9      	b.n	800545c <_malloc_r+0x20>
 80054c8:	4622      	mov	r2, r4
 80054ca:	6864      	ldr	r4, [r4, #4]
 80054cc:	e7cc      	b.n	8005468 <_malloc_r+0x2c>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d0e3      	beq.n	80054a0 <_malloc_r+0x64>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f808 	bl	80054f0 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1dd      	bne.n	80054a0 <_malloc_r+0x64>
 80054e4:	e7cf      	b.n	8005486 <_malloc_r+0x4a>
 80054e6:	bf00      	nop
 80054e8:	20000090 	.word	0x20000090
 80054ec:	20000094 	.word	0x20000094

080054f0 <_sbrk_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	; (800550c <_sbrk_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fc fe82 	bl	8002204 <_sbrk>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_sbrk_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_sbrk_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	200002e4 	.word	0x200002e4

08005510 <__sread>:
 8005510:	b510      	push	{r4, lr}
 8005512:	460c      	mov	r4, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	f000 f8a0 	bl	800565c <_read_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	bfab      	itete	ge
 8005520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005522:	89a3      	ldrhlt	r3, [r4, #12]
 8005524:	181b      	addge	r3, r3, r0
 8005526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800552a:	bfac      	ite	ge
 800552c:	6563      	strge	r3, [r4, #84]	; 0x54
 800552e:	81a3      	strhlt	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__swrite>:
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	461f      	mov	r7, r3
 8005538:	898b      	ldrh	r3, [r1, #12]
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	4605      	mov	r5, r0
 800553e:	460c      	mov	r4, r1
 8005540:	4616      	mov	r6, r2
 8005542:	d505      	bpl.n	8005550 <__swrite+0x1e>
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	2302      	movs	r3, #2
 800554a:	2200      	movs	r2, #0
 800554c:	f000 f868 	bl	8005620 <_lseek_r>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	4632      	mov	r2, r6
 800555e:	463b      	mov	r3, r7
 8005560:	4628      	mov	r0, r5
 8005562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005566:	f000 b817 	b.w	8005598 <_write_r>

0800556a <__sseek>:
 800556a:	b510      	push	{r4, lr}
 800556c:	460c      	mov	r4, r1
 800556e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005572:	f000 f855 	bl	8005620 <_lseek_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	bf15      	itete	ne
 800557c:	6560      	strne	r0, [r4, #84]	; 0x54
 800557e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005586:	81a3      	strheq	r3, [r4, #12]
 8005588:	bf18      	it	ne
 800558a:	81a3      	strhne	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__sclose>:
 800558e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005592:	f000 b813 	b.w	80055bc <_close_r>
	...

08005598 <_write_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_write_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fc fddb 	bl	8002162 <_write>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_write_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_write_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	200002e4 	.word	0x200002e4

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_close_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fc fde7 	bl	800219a <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	200002e4 	.word	0x200002e4

080055dc <_fstat_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	; (80055fc <_fstat_r+0x20>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f7fc fde2 	bl	80021b2 <_fstat>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d102      	bne.n	80055f8 <_fstat_r+0x1c>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	b103      	cbz	r3, 80055f8 <_fstat_r+0x1c>
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	200002e4 	.word	0x200002e4

08005600 <_isatty_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d06      	ldr	r5, [pc, #24]	; (800561c <_isatty_r+0x1c>)
 8005604:	2300      	movs	r3, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	f7fc fde1 	bl	80021d2 <_isatty>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_isatty_r+0x1a>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_isatty_r+0x1a>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	200002e4 	.word	0x200002e4

08005620 <_lseek_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	; (8005640 <_lseek_r+0x20>)
 8005624:	4604      	mov	r4, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fc fdda 	bl	80021e8 <_lseek>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_lseek_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_lseek_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	200002e4 	.word	0x200002e4

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__malloc_lock+0x8>)
 8005646:	f7ff be43 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	200002dc 	.word	0x200002dc

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff be3e 	b.w	80052d2 <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	200002dc 	.word	0x200002dc

0800565c <_read_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d07      	ldr	r5, [pc, #28]	; (800567c <_read_r+0x20>)
 8005660:	4604      	mov	r4, r0
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
 8005666:	2200      	movs	r2, #0
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f7fc fd5c 	bl	8002128 <_read>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_read_r+0x1e>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_read_r+0x1e>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	200002e4 	.word	0x200002e4

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
